//
// Generated by Bluespec Compiler, version 2011.06.D (build 24470, 2011-06-30)
//
// On Thu Sep  1 16:21:39 IST 2011
//
// Method conflict info:
// Method: retInSel
// Conflict-free: retInSel
//
//
// Ports:
// Name                         I/O  size props
// retInSel                       O     2 reg
// RDY_retInSel                   O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkInSel(CLK,
	       RST_N,

	       retInSel,
	       RDY_retInSel);
  input  CLK;
  input  RST_N;

  // value method retInSel
  output [1 : 0] retInSel;
  output RDY_retInSel;

  // signals for module outputs
  wire [1 : 0] retInSel;
  wire RDY_retInSel;

  // register c
  reg [24 : 0] c;
  wire [24 : 0] c$D_IN;
  wire c$EN;

  // register inp
  reg [1 : 0] inp;
  wire [1 : 0] inp$D_IN;
  wire inp$EN;

  // value method retInSel
  assign retInSel = inp ;
  assign RDY_retInSel = 1'd1 ;

  // register c
  assign c$D_IN = c + 25'd1 ;
  assign c$EN = 1'd1 ;

  // register inp
  assign inp$D_IN = inp + 2'd1 ;
  assign inp$EN = c == 25'b0 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        c <= `BSV_ASSIGNMENT_DELAY 25'd0;
	inp <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (c$EN) c <= `BSV_ASSIGNMENT_DELAY c$D_IN;
	if (inp$EN) inp <= `BSV_ASSIGNMENT_DELAY inp$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    c = 25'h0AAAAAA;
    inp = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkInSel

