//
// Generated by Bluespec Compiler, version 2011.06.D (build 24470, 2011-06-30)
//
// On Mon Oct 10 01:13:32 IST 2011
//
// Method conflict info:
// Method: setAddRegD
// Conflict-free: setWE, setDataIn
// Sequenced before (restricted): setAddRegD
// Sequenced after (restricted): readReg1, readReg2
//
// Method: setWE
// Conflict-free: setAddRegD, setDataIn
// Sequenced before (restricted): setWE
// Sequenced after (restricted): readReg1, readReg2
//
// Method: setDataIn
// Conflict-free: setAddRegD, setWE
// Sequenced before (restricted): setDataIn
// Sequenced after (restricted): readReg1, readReg2
//
// Method: readReg1
// Conflict-free: readReg1, readReg2
// Sequenced before (restricted): setAddRegD, setWE, setDataIn
//
// Method: readReg2
// Conflict-free: readReg1, readReg2
// Sequenced before (restricted): setAddRegD, setWE, setDataIn
//
//
// Ports:
// Name                         I/O  size props
// RDY_setAddRegD                 O     1 const
// RDY_setWE                      O     1 const
// RDY_setDataIn                  O     1 const
// readReg1                       O     4
// RDY_readReg1                   O     1 const
// readReg2                       O     4
// RDY_readReg2                   O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// setAddRegD_addD                I     4 reg
// setWE_write                    I     1 reg
// setDataIn_inputData            I     4 reg
// readReg1_add1                  I     4
// readReg2_add2                  I     4
// EN_setAddRegD                  I     1
// EN_setWE                       I     1
// EN_setDataIn                   I     1
//
// Combinational paths from inputs to outputs:
//   readReg1_add1 -> readReg1
//   readReg2_add2 -> readReg2
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkRegFile(CLK,
		 RST_N,

		 setAddRegD_addD,
		 EN_setAddRegD,
		 RDY_setAddRegD,

		 setWE_write,
		 EN_setWE,
		 RDY_setWE,

		 setDataIn_inputData,
		 EN_setDataIn,
		 RDY_setDataIn,

		 readReg1_add1,
		 readReg1,
		 RDY_readReg1,

		 readReg2_add2,
		 readReg2,
		 RDY_readReg2);
  input  CLK;
  input  RST_N;

  // action method setAddRegD
  input  [3 : 0] setAddRegD_addD;
  input  EN_setAddRegD;
  output RDY_setAddRegD;

  // action method setWE
  input  setWE_write;
  input  EN_setWE;
  output RDY_setWE;

  // action method setDataIn
  input  [3 : 0] setDataIn_inputData;
  input  EN_setDataIn;
  output RDY_setDataIn;

  // value method readReg1
  input  [3 : 0] readReg1_add1;
  output [3 : 0] readReg1;
  output RDY_readReg1;

  // value method readReg2
  input  [3 : 0] readReg2_add2;
  output [3 : 0] readReg2;
  output RDY_readReg2;

  // signals for module outputs
  reg [3 : 0] readReg1, readReg2;
  wire RDY_readReg1, RDY_readReg2, RDY_setAddRegD, RDY_setDataIn, RDY_setWE;

  // register addRegD
  reg [3 : 0] addRegD;
  wire [3 : 0] addRegD$D_IN;
  wire addRegD$EN;

  // register dataIn
  reg [3 : 0] dataIn;
  wire [3 : 0] dataIn$D_IN;
  wire dataIn$EN;

  // register decelerator
  reg [15 : 0] decelerator;
  wire [15 : 0] decelerator$D_IN;
  wire decelerator$EN;

  // register file_0
  reg [3 : 0] file_0;
  wire [3 : 0] file_0$D_IN;
  wire file_0$EN;

  // register file_1
  reg [3 : 0] file_1;
  wire [3 : 0] file_1$D_IN;
  wire file_1$EN;

  // register file_10
  reg [3 : 0] file_10;
  wire [3 : 0] file_10$D_IN;
  wire file_10$EN;

  // register file_11
  reg [3 : 0] file_11;
  wire [3 : 0] file_11$D_IN;
  wire file_11$EN;

  // register file_12
  reg [3 : 0] file_12;
  wire [3 : 0] file_12$D_IN;
  wire file_12$EN;

  // register file_13
  reg [3 : 0] file_13;
  wire [3 : 0] file_13$D_IN;
  wire file_13$EN;

  // register file_14
  reg [3 : 0] file_14;
  wire [3 : 0] file_14$D_IN;
  wire file_14$EN;

  // register file_15
  reg [3 : 0] file_15;
  wire [3 : 0] file_15$D_IN;
  wire file_15$EN;

  // register file_2
  reg [3 : 0] file_2;
  wire [3 : 0] file_2$D_IN;
  wire file_2$EN;

  // register file_3
  reg [3 : 0] file_3;
  wire [3 : 0] file_3$D_IN;
  wire file_3$EN;

  // register file_4
  reg [3 : 0] file_4;
  wire [3 : 0] file_4$D_IN;
  wire file_4$EN;

  // register file_5
  reg [3 : 0] file_5;
  wire [3 : 0] file_5$D_IN;
  wire file_5$EN;

  // register file_6
  reg [3 : 0] file_6;
  wire [3 : 0] file_6$D_IN;
  wire file_6$EN;

  // register file_7
  reg [3 : 0] file_7;
  wire [3 : 0] file_7$D_IN;
  wire file_7$EN;

  // register file_8
  reg [3 : 0] file_8;
  wire [3 : 0] file_8$D_IN;
  wire file_8$EN;

  // register file_9
  reg [3 : 0] file_9;
  wire [3 : 0] file_9$D_IN;
  wire file_9$EN;

  // register we
  reg we;
  wire we$D_IN, we$EN;

  // action method setAddRegD
  assign RDY_setAddRegD = 1'd1 ;

  // action method setWE
  assign RDY_setWE = 1'd1 ;

  // action method setDataIn
  assign RDY_setDataIn = 1'd1 ;

  // value method readReg1
  always@(readReg1_add1 or
	  file_15 or
	  file_0 or
	  file_1 or
	  file_2 or
	  file_3 or
	  file_4 or
	  file_5 or
	  file_6 or
	  file_7 or
	  file_8 or
	  file_9 or file_10 or file_11 or file_12 or file_13 or file_14)
  begin
    case (readReg1_add1)
      4'd0: readReg1 = file_0;
      4'd1: readReg1 = file_1;
      4'd2: readReg1 = file_2;
      4'd3: readReg1 = file_3;
      4'd4: readReg1 = file_4;
      4'd5: readReg1 = file_5;
      4'd6: readReg1 = file_6;
      4'd7: readReg1 = file_7;
      4'd8: readReg1 = file_8;
      4'd9: readReg1 = file_9;
      4'd10: readReg1 = file_10;
      4'd11: readReg1 = file_11;
      4'd12: readReg1 = file_12;
      4'd13: readReg1 = file_13;
      4'd14: readReg1 = file_14;
      4'd15: readReg1 = file_15;
    endcase
  end
  assign RDY_readReg1 = 1'd1 ;

  // value method readReg2
  always@(readReg2_add2 or
	  file_15 or
	  file_0 or
	  file_1 or
	  file_2 or
	  file_3 or
	  file_4 or
	  file_5 or
	  file_6 or
	  file_7 or
	  file_8 or
	  file_9 or file_10 or file_11 or file_12 or file_13 or file_14)
  begin
    case (readReg2_add2)
      4'd0: readReg2 = file_0;
      4'd1: readReg2 = file_1;
      4'd2: readReg2 = file_2;
      4'd3: readReg2 = file_3;
      4'd4: readReg2 = file_4;
      4'd5: readReg2 = file_5;
      4'd6: readReg2 = file_6;
      4'd7: readReg2 = file_7;
      4'd8: readReg2 = file_8;
      4'd9: readReg2 = file_9;
      4'd10: readReg2 = file_10;
      4'd11: readReg2 = file_11;
      4'd12: readReg2 = file_12;
      4'd13: readReg2 = file_13;
      4'd14: readReg2 = file_14;
      4'd15: readReg2 = file_15;
    endcase
  end
  assign RDY_readReg2 = 1'd1 ;

  // register addRegD
  assign addRegD$D_IN = setAddRegD_addD ;
  assign addRegD$EN = EN_setAddRegD ;

  // register dataIn
  assign dataIn$D_IN = setDataIn_inputData ;
  assign dataIn$EN = EN_setDataIn ;

  // register decelerator
  assign decelerator$D_IN = 16'h0 ;
  assign decelerator$EN = 1'b0 ;

  // register file_0
  assign file_0$D_IN = dataIn ;
  assign file_0$EN = we && addRegD == 4'd0 ;

  // register file_1
  assign file_1$D_IN = dataIn ;
  assign file_1$EN = we && addRegD == 4'd1 ;

  // register file_10
  assign file_10$D_IN = dataIn ;
  assign file_10$EN = we && addRegD == 4'd10 ;

  // register file_11
  assign file_11$D_IN = dataIn ;
  assign file_11$EN = we && addRegD == 4'd11 ;

  // register file_12
  assign file_12$D_IN = dataIn ;
  assign file_12$EN = we && addRegD == 4'd12 ;

  // register file_13
  assign file_13$D_IN = dataIn ;
  assign file_13$EN = we && addRegD == 4'd13 ;

  // register file_14
  assign file_14$D_IN = dataIn ;
  assign file_14$EN = we && addRegD == 4'd14 ;

  // register file_15
  assign file_15$D_IN = dataIn ;
  assign file_15$EN = we && addRegD == 4'd15 ;

  // register file_2
  assign file_2$D_IN = dataIn ;
  assign file_2$EN = we && addRegD == 4'd2 ;

  // register file_3
  assign file_3$D_IN = dataIn ;
  assign file_3$EN = we && addRegD == 4'd3 ;

  // register file_4
  assign file_4$D_IN = dataIn ;
  assign file_4$EN = we && addRegD == 4'd4 ;

  // register file_5
  assign file_5$D_IN = dataIn ;
  assign file_5$EN = we && addRegD == 4'd5 ;

  // register file_6
  assign file_6$D_IN = dataIn ;
  assign file_6$EN = we && addRegD == 4'd6 ;

  // register file_7
  assign file_7$D_IN = dataIn ;
  assign file_7$EN = we && addRegD == 4'd7 ;

  // register file_8
  assign file_8$D_IN = dataIn ;
  assign file_8$EN = we && addRegD == 4'd8 ;

  // register file_9
  assign file_9$D_IN = dataIn ;
  assign file_9$EN = we && addRegD == 4'd9 ;

  // register we
  assign we$D_IN = setWE_write ;
  assign we$EN = EN_setWE ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        addRegD <= `BSV_ASSIGNMENT_DELAY 4'd0;
	dataIn <= `BSV_ASSIGNMENT_DELAY 4'd0;
	decelerator <= `BSV_ASSIGNMENT_DELAY 16'd0;
	file_0 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	file_1 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	file_10 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	file_11 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	file_12 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	file_13 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	file_14 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	file_15 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	file_2 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	file_3 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	file_4 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	file_5 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	file_6 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	file_7 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	file_8 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	file_9 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	we <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (addRegD$EN) addRegD <= `BSV_ASSIGNMENT_DELAY addRegD$D_IN;
	if (dataIn$EN) dataIn <= `BSV_ASSIGNMENT_DELAY dataIn$D_IN;
	if (decelerator$EN)
	  decelerator <= `BSV_ASSIGNMENT_DELAY decelerator$D_IN;
	if (file_0$EN) file_0 <= `BSV_ASSIGNMENT_DELAY file_0$D_IN;
	if (file_1$EN) file_1 <= `BSV_ASSIGNMENT_DELAY file_1$D_IN;
	if (file_10$EN) file_10 <= `BSV_ASSIGNMENT_DELAY file_10$D_IN;
	if (file_11$EN) file_11 <= `BSV_ASSIGNMENT_DELAY file_11$D_IN;
	if (file_12$EN) file_12 <= `BSV_ASSIGNMENT_DELAY file_12$D_IN;
	if (file_13$EN) file_13 <= `BSV_ASSIGNMENT_DELAY file_13$D_IN;
	if (file_14$EN) file_14 <= `BSV_ASSIGNMENT_DELAY file_14$D_IN;
	if (file_15$EN) file_15 <= `BSV_ASSIGNMENT_DELAY file_15$D_IN;
	if (file_2$EN) file_2 <= `BSV_ASSIGNMENT_DELAY file_2$D_IN;
	if (file_3$EN) file_3 <= `BSV_ASSIGNMENT_DELAY file_3$D_IN;
	if (file_4$EN) file_4 <= `BSV_ASSIGNMENT_DELAY file_4$D_IN;
	if (file_5$EN) file_5 <= `BSV_ASSIGNMENT_DELAY file_5$D_IN;
	if (file_6$EN) file_6 <= `BSV_ASSIGNMENT_DELAY file_6$D_IN;
	if (file_7$EN) file_7 <= `BSV_ASSIGNMENT_DELAY file_7$D_IN;
	if (file_8$EN) file_8 <= `BSV_ASSIGNMENT_DELAY file_8$D_IN;
	if (file_9$EN) file_9 <= `BSV_ASSIGNMENT_DELAY file_9$D_IN;
	if (we$EN) we <= `BSV_ASSIGNMENT_DELAY we$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    addRegD = 4'hA;
    dataIn = 4'hA;
    decelerator = 16'hAAAA;
    file_0 = 4'hA;
    file_1 = 4'hA;
    file_10 = 4'hA;
    file_11 = 4'hA;
    file_12 = 4'hA;
    file_13 = 4'hA;
    file_14 = 4'hA;
    file_15 = 4'hA;
    file_2 = 4'hA;
    file_3 = 4'hA;
    file_4 = 4'hA;
    file_5 = 4'hA;
    file_6 = 4'hA;
    file_7 = 4'hA;
    file_8 = 4'hA;
    file_9 = 4'hA;
    we = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkRegFile

