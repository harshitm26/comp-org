//
// Generated by Bluespec Compiler, version 2011.06.D (build 24470, 2011-06-30)
//
// On Sat Sep 24 01:40:05 IST 2011
//
// Method conflict info:
// Method: retAnodeSelected
// Conflict-free: retAnodeSelected, retSegmentData, retLEDSignals
// Sequenced before (restricted): updateInput
//
// Method: retSegmentData
// Conflict-free: retAnodeSelected, retSegmentData, retLEDSignals
// Sequenced before (restricted): updateInput
//
// Method: updateInput
// Sequenced before (restricted): updateInput
// Sequenced after (restricted): retAnodeSelected, retSegmentData, retLEDSignals
//
// Method: retLEDSignals
// Conflict-free: retAnodeSelected, retSegmentData, retLEDSignals
// Sequenced before (restricted): updateInput
//
//
// Ports:
// Name                         I/O  size props
// retAnodeSelected               O     4
// RDY_retAnodeSelected           O     1 const
// retSegmentData                 O     7 reg
// RDY_retSegmentData             O     1 const
// RDY_updateInput                O     1 const
// retLEDSignals                  O     4 reg
// RDY_retLEDSignals              O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// updateInput_btns               I     3 reg
// updateInput_swtchs             I     6 reg
// EN_updateInput                 I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkWatch(CLK,
	       RST_N,

	       retAnodeSelected,
	       RDY_retAnodeSelected,

	       retSegmentData,
	       RDY_retSegmentData,

	       updateInput_btns,
	       updateInput_swtchs,
	       EN_updateInput,
	       RDY_updateInput,

	       retLEDSignals,
	       RDY_retLEDSignals);
  input  CLK;
  input  RST_N;

  // value method retAnodeSelected
  output [3 : 0] retAnodeSelected;
  output RDY_retAnodeSelected;

  // value method retSegmentData
  output [6 : 0] retSegmentData;
  output RDY_retSegmentData;

  // action method updateInput
  input  [2 : 0] updateInput_btns;
  input  [5 : 0] updateInput_swtchs;
  input  EN_updateInput;
  output RDY_updateInput;

  // value method retLEDSignals
  output [3 : 0] retLEDSignals;
  output RDY_retLEDSignals;

  // signals for module outputs
  reg [3 : 0] retAnodeSelected;
  wire [6 : 0] retSegmentData;
  wire [3 : 0] retLEDSignals;
  wire RDY_retAnodeSelected,
       RDY_retLEDSignals,
       RDY_retSegmentData,
       RDY_updateInput;

  // register alarmHH
  reg [4 : 0] alarmHH;
  wire [4 : 0] alarmHH$D_IN;
  wire alarmHH$EN;

  // register alarmMM
  reg [5 : 0] alarmMM;
  wire [5 : 0] alarmMM$D_IN;
  wire alarmMM$EN;

  // register anodeSelected
  reg [1 : 0] anodeSelected;
  wire [1 : 0] anodeSelected$D_IN;
  wire anodeSelected$EN;

  // register blinker
  reg blinker;
  wire blinker$D_IN, blinker$EN;

  // register btdecelerator
  reg [7 : 0] btdecelerator;
  wire [7 : 0] btdecelerator$D_IN;
  wire btdecelerator$EN;

  // register btn0
  reg btn0;
  wire btn0$D_IN, btn0$EN;

  // register btn1
  reg btn1;
  wire btn1$D_IN, btn1$EN;

  // register btn1stream
  reg [7 : 0] btn1stream;
  wire [7 : 0] btn1stream$D_IN;
  wire btn1stream$EN;

  // register btn2
  reg btn2;
  wire btn2$D_IN, btn2$EN;

  // register btn2stream
  reg [7 : 0] btn2stream;
  wire [7 : 0] btn2stream$D_IN;
  wire btn2stream$EN;

  // register btn3stream
  reg [7 : 0] btn3stream;
  wire [7 : 0] btn3stream$D_IN;
  wire btn3stream$EN;

  // register btnin
  reg [2 : 0] btnin;
  wire [2 : 0] btnin$D_IN;
  wire btnin$EN;

  // register counterAnodeSelected
  reg [14 : 0] counterAnodeSelected;
  wire [14 : 0] counterAnodeSelected$D_IN;
  wire counterAnodeSelected$EN;

  // register counterblinker
  reg [22 : 0] counterblinker;
  wire [22 : 0] counterblinker$D_IN;
  wire counterblinker$EN;

  // register led
  reg [3 : 0] led;
  reg [3 : 0] led$D_IN;
  wire led$EN;

  // register mode
  reg [2 : 0] mode;
  reg [2 : 0] mode$D_IN;
  wire mode$EN;

  // register segmentData
  reg [6 : 0] segmentData;
  reg [6 : 0] segmentData$D_IN;
  wire segmentData$EN;

  // register setState
  reg [2 : 0] setState;
  reg [2 : 0] setState$D_IN;
  wire setState$EN;

  // register stopWatch1
  reg [3 : 0] stopWatch1;
  wire [3 : 0] stopWatch1$D_IN;
  wire stopWatch1$EN;

  // register stopWatch2
  reg [3 : 0] stopWatch2;
  wire [3 : 0] stopWatch2$D_IN;
  wire stopWatch2$EN;

  // register stopWatch3
  reg [3 : 0] stopWatch3;
  wire [3 : 0] stopWatch3$D_IN;
  wire stopWatch3$EN;

  // register stopWatch4
  reg [3 : 0] stopWatch4;
  wire [3 : 0] stopWatch4$D_IN;
  wire stopWatch4$EN;

  // register stopWatchDecelerator
  reg [17 : 0] stopWatchDecelerator;
  wire [17 : 0] stopWatchDecelerator$D_IN;
  wire stopWatchDecelerator$EN;

  // register stopWatchState
  reg stopWatchState;
  wire stopWatchState$D_IN, stopWatchState$EN;

  // register switches
  reg [5 : 0] switches;
  wire [5 : 0] switches$D_IN;
  wire switches$EN;

  // register takeInput
  reg [17 : 0] takeInput;
  wire [17 : 0] takeInput$D_IN;
  wire takeInput$EN;

  // register toShow1
  reg [3 : 0] toShow1;
  reg [3 : 0] toShow1$D_IN;
  wire toShow1$EN;

  // register toShow2
  reg [3 : 0] toShow2;
  reg [3 : 0] toShow2$D_IN;
  wire toShow2$EN;

  // register toShow3
  reg [3 : 0] toShow3;
  reg [3 : 0] toShow3$D_IN;
  wire toShow3$EN;

  // register toShow4
  reg [3 : 0] toShow4;
  reg [3 : 0] toShow4$D_IN;
  wire toShow4$EN;

  // ports of submodule clock
  wire [11 : 0] clock$dataMMSS;
  wire [10 : 0] clock$dataHHMM;
  wire [5 : 0] clock$setMM_mm, clock$setSS_ss;
  wire [4 : 0] clock$setHH_hh;
  wire clock$EN_pause,
       clock$EN_setHH,
       clock$EN_setMM,
       clock$EN_setSS,
       clock$EN_start;

  // ports of submodule h2s0
  wire [6 : 0] h2s0$decode;
  wire [3 : 0] h2s0$decode_hex;

  // ports of submodule h2s1
  wire [6 : 0] h2s1$decode;
  wire [3 : 0] h2s1$decode_hex;

  // ports of submodule h2s2
  wire [6 : 0] h2s2$decode;
  wire [3 : 0] h2s2$decode_hex;

  // ports of submodule h2s3
  wire [6 : 0] h2s3$decode;
  wire [3 : 0] h2s3$decode_hex;

  // rule scheduling signals
  wire WILL_FIRE_RL_settingalarmrule,
       WILL_FIRE_RL_settinghhmmrule,
       WILL_FIRE_RL_settingmmssrule;

  // inputs to muxes for submodule ports
  reg [3 : 0] MUX_led$write_1__VAL_2, MUX_led$write_1__VAL_3;
  reg [2 : 0] MUX_setState$write_1__VAL_2;
  wire [3 : 0] MUX_led$write_1__VAL_1,
	       MUX_led$write_1__VAL_4,
	       MUX_stopWatch1$write_1__VAL_2,
	       MUX_stopWatch2$write_1__VAL_2,
	       MUX_stopWatch3$write_1__VAL_2,
	       MUX_stopWatch4$write_1__VAL_2,
	       MUX_toShow2$write_1__VAL_1,
	       MUX_toShow2$write_1__VAL_3,
	       MUX_toShow2$write_1__VAL_4,
	       MUX_toShow2$write_1__VAL_5,
	       MUX_toShow4$write_1__VAL_1,
	       MUX_toShow4$write_1__VAL_4,
	       MUX_toShow4$write_1__VAL_5,
	       MUX_toShow4$write_1__VAL_6;
  wire [2 : 0] MUX_mode$write_1__VAL_4;
  wire MUX_led$write_1__PSEL_3,
       MUX_led$write_1__SEL_1,
       MUX_led$write_1__SEL_2,
       MUX_led$write_1__SEL_3,
       MUX_mode$write_1__SEL_1,
       MUX_mode$write_1__SEL_2,
       MUX_mode$write_1__SEL_3,
       MUX_mode$write_1__SEL_4,
       MUX_setState$write_1__SEL_2,
       MUX_setState$write_1__SEL_3,
       MUX_stopWatch1$write_1__SEL_1,
       MUX_toShow1$write_1__PSEL_1,
       MUX_toShow1$write_1__SEL_1,
       MUX_toShow2$write_1__SEL_1,
       MUX_toShow3$write_1__PSEL_2,
       MUX_toShow3$write_1__SEL_1,
       MUX_toShow3$write_1__SEL_2,
       MUX_toShow4$write_1__SEL_2;

  // remaining internal signals
  reg [2 : 0] CASE_mode_0_0_1_1_2_2_3__q1, CASE_mode_6_0_4_1_5__q2;
  wire [5 : 0] IF_0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS__ETC___d350,
	       IF_0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS__ETC___d352,
	       IF_0b0_CONCAT_alarmHH_47_36_ULT_10_37_THEN_0b0_ETC___d354,
	       IF_0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6__ETC___d246,
	       IF_0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6__ETC___d248,
	       IF_0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6__ETC___d250,
	       IF_0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MI_ETC___d418,
	       IF_0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MI_ETC___d420,
	       IF_0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_UL_ETC___d422,
	       IF_alarmMM_51_MINUS_10_12_MINUS_10_14_MINUS_10_ETC___d324,
	       IF_alarmMM_51_MINUS_10_12_MINUS_10_14_ULT_10_1_ETC___d326,
	       IF_alarmMM_51_ULT_10_11_THEN_alarmMM_51_ELSE_I_ETC___d328,
	       IF_clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10__ETC___d220,
	       IF_clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10__ETC___d222,
	       IF_clock_dataHHMM__48_BITS_5_TO_0_52_ULT_10_07_ETC___d224,
	       IF_clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_ETC___d299,
	       IF_clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_ETC___d301,
	       IF_clock_dataMMSS__58_BITS_11_TO_6_85_ULT_10_8_ETC___d303,
	       IF_clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10__ETC___d273,
	       IF_clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10__ETC___d275,
	       IF_clock_dataMMSS__58_BITS_5_TO_0_59_ULT_10_60_ETC___d277,
	       IF_switches_74_MINUS_10_31_MINUS_10_33_MINUS_1_ETC___d449,
	       IF_switches_74_MINUS_10_31_MINUS_10_33_ULT_10__ETC___d451,
	       IF_switches_74_ULT_10_30_THEN_switches_74_ELSE_ETC___d453,
	       _0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS_10__ETC___d517,
	       _0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS_10__ETC___d518,
	       _0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS_10__ETC___d519,
	       _0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS_10___d516,
	       _0b0_CONCAT_alarmHH_47_36_MINUS_10___d515,
	       _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d495,
	       _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d496,
	       _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d497,
	       _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d498,
	       _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d499,
	       _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_10___d520,
	       _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d521,
	       _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d522,
	       _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d523,
	       _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d524,
	       alarmMM_51_MINUS_10_12_MINUS_10_14_MINUS_10_16_ETC___d513,
	       alarmMM_51_MINUS_10_12_MINUS_10_14_MINUS_10_16_ETC___d514,
	       alarmMM_51_MINUS_10_12_MINUS_10_14_MINUS_10___d512,
	       alarmMM_51_MINUS_10_12_MINUS_10___d511,
	       alarmMM_51_MINUS_10___d510,
	       clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d491,
	       clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d492,
	       clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d493,
	       clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d494,
	       clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10___d490,
	       clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d506,
	       clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d507,
	       clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d508,
	       clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d509,
	       clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10___d505,
	       clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d501,
	       clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d502,
	       clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d503,
	       clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d504,
	       clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10___d500,
	       given__h5131,
	       given__h6118,
	       given__h6840,
	       switches_74_MINUS_10_31_MINUS_10_33_MINUS_10_3_ETC___d528,
	       switches_74_MINUS_10_31_MINUS_10_33_MINUS_10_3_ETC___d529,
	       switches_74_MINUS_10_31_MINUS_10_33_MINUS_10___d527,
	       switches_74_MINUS_10_31_MINUS_10___d526,
	       switches_74_MINUS_10___d525;
  wire [3 : 0] IF_0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS__ETC___d358,
	       IF_0b0_CONCAT_alarmHH_47_36_MINUS_10_38_ULT_10_ETC___d360,
	       IF_0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6__ETC___d254,
	       IF_0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6__ETC___d256,
	       IF_0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MI_ETC___d426,
	       IF_0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MI_ETC___d428,
	       IF_alarmMM_51_MINUS_10_12_MINUS_10_14_MINUS_10_ETC___d332,
	       IF_alarmMM_51_MINUS_10_12_ULT_10_13_THEN_1_ELS_ETC___d334,
	       IF_btn1stream_BIT_0_8_THEN_1_ELSE_0___d469,
	       IF_btn1stream_BIT_1_7_THEN_IF_btn1stream_BIT_0_ETC___d470,
	       IF_btn1stream_BIT_2_6_THEN_IF_btn1stream_BIT_1_ETC___d471,
	       IF_btn1stream_BIT_3_5_THEN_IF_btn1stream_BIT_2_ETC___d472,
	       IF_btn1stream_BIT_4_4_THEN_IF_btn1stream_BIT_3_ETC___d473,
	       IF_btn1stream_BIT_5_3_THEN_IF_btn1stream_BIT_4_ETC___d474,
	       IF_btn1stream_BIT_6_2_THEN_IF_btn1stream_BIT_5_ETC___d475,
	       IF_btn2stream_3_BIT_0_3_THEN_1_ELSE_0___d476,
	       IF_btn2stream_3_BIT_1_2_THEN_IF_btn2stream_3_B_ETC___d477,
	       IF_btn2stream_3_BIT_2_1_THEN_IF_btn2stream_3_B_ETC___d478,
	       IF_btn2stream_3_BIT_3_0_THEN_IF_btn2stream_3_B_ETC___d479,
	       IF_btn2stream_3_BIT_4_9_THEN_IF_btn2stream_3_B_ETC___d480,
	       IF_btn2stream_3_BIT_5_8_THEN_IF_btn2stream_3_B_ETC___d481,
	       IF_btn2stream_3_BIT_6_7_THEN_IF_btn2stream_3_B_ETC___d482,
	       IF_btn3stream_7_BIT_0_8_THEN_1_ELSE_0___d483,
	       IF_btn3stream_7_BIT_1_7_THEN_IF_btn3stream_7_B_ETC___d484,
	       IF_btn3stream_7_BIT_2_6_THEN_IF_btn3stream_7_B_ETC___d485,
	       IF_btn3stream_7_BIT_3_5_THEN_IF_btn3stream_7_B_ETC___d486,
	       IF_btn3stream_7_BIT_4_4_THEN_IF_btn3stream_7_B_ETC___d487,
	       IF_btn3stream_7_BIT_5_3_THEN_IF_btn3stream_7_B_ETC___d488,
	       IF_btn3stream_7_BIT_6_2_THEN_IF_btn3stream_7_B_ETC___d489,
	       IF_clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10__ETC___d228,
	       IF_clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10__ETC___d230,
	       IF_clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_ETC___d307,
	       IF_clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_ETC___d309,
	       IF_clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10__ETC___d281,
	       IF_clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10__ETC___d283,
	       IF_switches_74_MINUS_10_31_MINUS_10_33_MINUS_1_ETC___d443,
	       IF_switches_74_MINUS_10_31_ULT_10_32_THEN_1_EL_ETC___d445,
	       one__h2272,
	       one__h2301,
	       one__h2330,
	       one__h2359,
	       one__h2388,
	       one__h2417,
	       one__h2446,
	       one__h2658,
	       one__h2687,
	       one__h2716,
	       one__h2745,
	       one__h2774,
	       one__h2803,
	       one__h2832,
	       one__h3032,
	       one__h3061,
	       one__h3090,
	       one__h3119,
	       one__h3148,
	       one__h3177,
	       one__h3206,
	       x__h10214,
	       x__h2179,
	       x__h2565,
	       x__h2939,
	       x__h4492,
	       x__h4538,
	       x__h4578,
	       x__h4614;
  wire NOT_btn0_00_13_AND_btn1_14_AND_setState_01_EQ__ETC___d119,
       NOT_stopWatchState_36_37_AND_btn2_39_40_AND_se_ETC___d142,
       _0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS_10__ETC___d591,
       _0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS_10__ETC___d592,
       _0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS_10__ETC___d593,
       _0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS_10__ETC___d594,
       _0b0_CONCAT_alarmHH_47_36_MINUS_10_38_ULT_10___d590,
       _0b0_CONCAT_alarmHH_47_36_ULT_10___d589,
       _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d565,
       _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d566,
       _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d567,
       _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d568,
       _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d569,
       _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d570,
       _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d596,
       _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d597,
       _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d598,
       _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d599,
       _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d600,
       _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_ULT_10___d595,
       _dor1clock$EN_start,
       alarmMM_51_MINUS_10_12_MINUS_10_14_MINUS_10_16_ETC___d586,
       alarmMM_51_MINUS_10_12_MINUS_10_14_MINUS_10_16_ETC___d587,
       alarmMM_51_MINUS_10_12_MINUS_10_14_MINUS_10_16_ETC___d588,
       alarmMM_51_MINUS_10_12_MINUS_10_14_ULT_10___d585,
       alarmMM_51_MINUS_10_12_ULT_10___d584,
       alarmMM_51_ULT_10___d583,
       btn0_00_AND_setState_01_EQ_0_02_03_AND_mode_04_ETC___d112,
       clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d560,
       clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d561,
       clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d562,
       clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d563,
       clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d564,
       clock_dataHHMM__48_BITS_5_TO_0_52_ULT_10___d559,
       clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d578,
       clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d579,
       clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d580,
       clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d581,
       clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d582,
       clock_dataMMSS__58_BITS_11_TO_6_85_ULT_10___d577,
       clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d572,
       clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d573,
       clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d574,
       clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d575,
       clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d576,
       clock_dataMMSS__58_BITS_5_TO_0_59_ULT_10___d571,
       setState_01_EQ_1_66_AND_btn2_39_AND_switches_7_ETC___d400,
       setState_01_EQ_1_66_AND_btn2_39_AND_switches_7_ETC___d463,
       setState_01_EQ_3_68_AND_btn2_39_AND_switches_7_ETC___d396,
       stopWatchDecelerator_82_EQ_0_84_AND_stopWatch1_ETC___d202,
       switches_74_MINUS_10_31_MINUS_10_33_MINUS_10_3_ETC___d604,
       switches_74_MINUS_10_31_MINUS_10_33_MINUS_10_3_ETC___d605,
       switches_74_MINUS_10_31_MINUS_10_33_MINUS_10_3_ETC___d606,
       switches_74_MINUS_10_31_MINUS_10_33_ULT_10___d603,
       switches_74_MINUS_10_31_ULT_10___d602,
       switches_74_ULE_59___d607,
       switches_74_ULT_10___d601,
       takeInput_ULE_8___d145;

  // value method retAnodeSelected
  always@(anodeSelected)
  begin
    case (anodeSelected)
      2'b0: retAnodeSelected = 4'b0111;
      2'b01: retAnodeSelected = 4'b1011;
      2'b10: retAnodeSelected = 4'b1101;
      2'd3: retAnodeSelected = 4'b1110;
    endcase
  end
  assign RDY_retAnodeSelected = 1'd1 ;

  // value method retSegmentData
  assign retSegmentData = segmentData ;
  assign RDY_retSegmentData = 1'd1 ;

  // action method updateInput
  assign RDY_updateInput = 1'd1 ;

  // value method retLEDSignals
  assign retLEDSignals = led ;
  assign RDY_retLEDSignals = 1'd1 ;

  // submodule clock
  mkClock clock(.CLK(CLK),
		.RST_N(RST_N),
		.setHH_hh(clock$setHH_hh),
		.setMM_mm(clock$setMM_mm),
		.setSS_ss(clock$setSS_ss),
		.EN_pause(clock$EN_pause),
		.EN_start(clock$EN_start),
		.EN_setHH(clock$EN_setHH),
		.EN_setMM(clock$EN_setMM),
		.EN_setSS(clock$EN_setSS),
		.RDY_pause(),
		.RDY_start(),
		.RDY_setHH(),
		.RDY_setMM(),
		.RDY_setSS(),
		.dataHHMM(clock$dataHHMM),
		.RDY_dataHHMM(),
		.dataMMSS(clock$dataMMSS),
		.RDY_dataMMSS());

  // submodule h2s0
  mkh2s h2s0(.CLK(CLK),
	     .RST_N(RST_N),
	     .decode_hex(h2s0$decode_hex),
	     .decode(h2s0$decode),
	     .RDY_decode(),
	     .dispsegment(),
	     .RDY_dispsegment());

  // submodule h2s1
  mkh2s h2s1(.CLK(CLK),
	     .RST_N(RST_N),
	     .decode_hex(h2s1$decode_hex),
	     .decode(h2s1$decode),
	     .RDY_decode(),
	     .dispsegment(),
	     .RDY_dispsegment());

  // submodule h2s2
  mkh2s h2s2(.CLK(CLK),
	     .RST_N(RST_N),
	     .decode_hex(h2s2$decode_hex),
	     .decode(h2s2$decode),
	     .RDY_decode(),
	     .dispsegment(),
	     .RDY_dispsegment());

  // submodule h2s3
  mkh2s h2s3(.CLK(CLK),
	     .RST_N(RST_N),
	     .decode_hex(h2s3$decode_hex),
	     .decode(h2s3$decode),
	     .RDY_decode(),
	     .dispsegment(),
	     .RDY_dispsegment());

  // rule RL_settinghhmmrule
  assign WILL_FIRE_RL_settinghhmmrule =
	     mode == 3'd4 && takeInput != 18'd0 && takeInput_ULE_8___d145 ;

  // rule RL_settingmmssrule
  assign WILL_FIRE_RL_settingmmssrule =
	     mode == 3'd5 && takeInput != 18'd0 && takeInput_ULE_8___d145 ;

  // rule RL_settingalarmrule
  assign WILL_FIRE_RL_settingalarmrule =
	     mode == 3'd6 && takeInput != 18'd0 && takeInput_ULE_8___d145 ;

  // inputs to muxes for submodule ports
  assign MUX_led$write_1__SEL_1 =
	     takeInput == 18'd0 &&
	     NOT_btn0_00_13_AND_btn1_14_AND_setState_01_EQ__ETC___d119 ;
  assign MUX_led$write_1__SEL_2 =
	     WILL_FIRE_RL_settingmmssrule &&
	     (setState == 3'd1 || setState == 3'd2 || setState == 3'd3 ||
	      setState == 3'd4) ;
  assign MUX_led$write_1__PSEL_3 =
	     WILL_FIRE_RL_settingalarmrule || WILL_FIRE_RL_settinghhmmrule ;
  assign MUX_led$write_1__SEL_3 =
	     MUX_led$write_1__PSEL_3 &&
	     (setState == 3'd1 || setState == 3'd2 || setState == 3'd3 ||
	      setState == 3'd4) ;
  assign MUX_mode$write_1__SEL_1 =
	     WILL_FIRE_RL_settinghhmmrule && setState == 3'd4 && btn1 ;
  assign MUX_mode$write_1__SEL_2 =
	     WILL_FIRE_RL_settingmmssrule && setState == 3'd4 && btn1 ;
  assign MUX_mode$write_1__SEL_3 =
	     WILL_FIRE_RL_settingalarmrule && setState == 3'd4 && btn1 ;
  assign MUX_mode$write_1__SEL_4 =
	     takeInput == 18'd0 &&
	     (btn0_00_AND_setState_01_EQ_0_02_03_AND_mode_04_ETC___d112 ||
	      NOT_btn0_00_13_AND_btn1_14_AND_setState_01_EQ__ETC___d119) ;
  assign MUX_setState$write_1__SEL_2 =
	     MUX_led$write_1__PSEL_3 &&
	     setState_01_EQ_1_66_AND_btn2_39_AND_switches_7_ETC___d400 ;
  assign MUX_setState$write_1__SEL_3 =
	     WILL_FIRE_RL_settingmmssrule &&
	     setState_01_EQ_1_66_AND_btn2_39_AND_switches_7_ETC___d463 ;
  assign MUX_stopWatch1$write_1__SEL_1 =
	     takeInput == 18'd0 && !btn0 && !btn1 &&
	     NOT_stopWatchState_36_37_AND_btn2_39_40_AND_se_ETC___d142 ;
  assign MUX_toShow1$write_1__PSEL_1 =
	     WILL_FIRE_RL_settingalarmrule || WILL_FIRE_RL_settingmmssrule ||
	     WILL_FIRE_RL_settinghhmmrule ;
  assign MUX_toShow1$write_1__SEL_1 =
	     MUX_toShow1$write_1__PSEL_1 && setState == 3'd3 ;
  assign MUX_toShow2$write_1__SEL_1 =
	     MUX_toShow1$write_1__PSEL_1 && setState == 3'd3 ;
  assign MUX_toShow3$write_1__SEL_1 =
	     WILL_FIRE_RL_settinghhmmrule && setState == 3'd1 ;
  assign MUX_toShow3$write_1__PSEL_2 =
	     WILL_FIRE_RL_settingalarmrule || WILL_FIRE_RL_settingmmssrule ;
  assign MUX_toShow3$write_1__SEL_2 =
	     MUX_toShow3$write_1__PSEL_2 && setState == 3'd1 ;
  assign MUX_toShow4$write_1__SEL_2 =
	     MUX_toShow3$write_1__PSEL_2 && setState == 3'd1 ;
  assign MUX_led$write_1__VAL_1 = { led[3], 1'd1, led[1:0] } ;
  always@(setState or
	  led or switches_74_ULE_59___d607 or blinker or x__h10214)
  begin
    case (setState)
      3'd1:
	  MUX_led$write_1__VAL_2 =
	      { led[3:1], !switches_74_ULE_59___d607 && blinker };
      3'd2: MUX_led$write_1__VAL_2 = 4'd0;
      3'd3:
	  MUX_led$write_1__VAL_2 =
	      switches_74_ULE_59___d607 ? 4'b0010 : x__h10214;
      default: MUX_led$write_1__VAL_2 = 4'd0;
    endcase
  end
  always@(setState or
	  led or
	  switches or blinker or switches_74_ULE_59___d607 or x__h10214)
  begin
    case (setState)
      3'd1:
	  MUX_led$write_1__VAL_3 =
	      { led[3:1], switches[4:0] > 5'd23 && blinker };
      3'd2: MUX_led$write_1__VAL_3 = 4'd0;
      3'd3:
	  MUX_led$write_1__VAL_3 =
	      switches_74_ULE_59___d607 ? 4'b0010 : x__h10214;
      default: MUX_led$write_1__VAL_3 = 4'd0;
    endcase
  end
  assign MUX_led$write_1__VAL_4 =
	     { alarmHH == clock$dataHHMM[10:6] &&
	       alarmMM == clock$dataHHMM[5:0] &&
	       setState == 3'd0 &&
	       blinker,
	       led[2:0] } ;
  assign MUX_mode$write_1__VAL_4 =
	     (btn0 && setState == 3'd0) ?
	       CASE_mode_0_0_1_1_2_2_3__q1 :
	       CASE_mode_6_0_4_1_5__q2 ;
  always@(setState)
  begin
    case (setState)
      3'd1: MUX_setState$write_1__VAL_2 = 3'd2;
      3'd2: MUX_setState$write_1__VAL_2 = 3'd3;
      3'd3: MUX_setState$write_1__VAL_2 = 3'd4;
      default: MUX_setState$write_1__VAL_2 = 3'd0;
    endcase
  end
  assign MUX_stopWatch1$write_1__VAL_2 =
	     (stopWatch1 == 4'd9) ? 4'd0 : x__h4492 ;
  assign MUX_stopWatch2$write_1__VAL_2 =
	     (stopWatch2 == 4'd9) ? 4'd0 : x__h4538 ;
  assign MUX_stopWatch3$write_1__VAL_2 =
	     (stopWatch3 == 4'd9) ? 4'd0 : x__h4578 ;
  assign MUX_stopWatch4$write_1__VAL_2 =
	     (stopWatch4 == 4'd9) ? 4'd0 : x__h4614 ;
  assign MUX_toShow2$write_1__VAL_1 =
	     switches_74_ULT_10___d601 ?
	       4'd0 :
	       IF_switches_74_MINUS_10_31_ULT_10_32_THEN_1_EL_ETC___d445 ;
  assign MUX_toShow2$write_1__VAL_3 =
	     clock_dataHHMM__48_BITS_5_TO_0_52_ULT_10___d559 ?
	       4'd0 :
	       IF_clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10__ETC___d230 ;
  assign MUX_toShow2$write_1__VAL_4 =
	     clock_dataMMSS__58_BITS_5_TO_0_59_ULT_10___d571 ?
	       4'd0 :
	       IF_clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10__ETC___d283 ;
  assign MUX_toShow2$write_1__VAL_5 =
	     alarmMM_51_ULT_10___d583 ?
	       4'd0 :
	       IF_alarmMM_51_MINUS_10_12_ULT_10_13_THEN_1_ELS_ETC___d334 ;
  assign MUX_toShow4$write_1__VAL_1 =
	     _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_ULT_10___d595 ?
	       4'd0 :
	       IF_0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MI_ETC___d428 ;
  assign MUX_toShow4$write_1__VAL_4 =
	     _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d565 ?
	       4'd0 :
	       IF_0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6__ETC___d256 ;
  assign MUX_toShow4$write_1__VAL_5 =
	     clock_dataMMSS__58_BITS_11_TO_6_85_ULT_10___d577 ?
	       4'd0 :
	       IF_clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_ETC___d309 ;
  assign MUX_toShow4$write_1__VAL_6 =
	     _0b0_CONCAT_alarmHH_47_36_ULT_10___d589 ?
	       4'd0 :
	       IF_0b0_CONCAT_alarmHH_47_36_MINUS_10_38_ULT_10_ETC___d360 ;

  // register alarmHH
  assign alarmHH$D_IN = switches[4:0] ;
  assign alarmHH$EN =
	     WILL_FIRE_RL_settingalarmrule && setState == 3'd1 && btn2 &&
	     switches[4:0] < 5'd24 ;

  // register alarmMM
  assign alarmMM$D_IN = switches ;
  assign alarmMM$EN =
	     WILL_FIRE_RL_settingalarmrule && setState == 3'd3 && btn2 &&
	     switches < 6'd60 ;

  // register anodeSelected
  assign anodeSelected$D_IN = anodeSelected + 2'b01 ;
  assign anodeSelected$EN =
	     !takeInput_ULE_8___d145 && counterAnodeSelected == 15'd0 ;

  // register blinker
  assign blinker$D_IN = 1'b1 - blinker ;
  assign blinker$EN = counterblinker == 23'd0 ;

  // register btdecelerator
  assign btdecelerator$D_IN = btdecelerator + 8'd1 ;
  assign btdecelerator$EN = 1'd1 ;

  // register btn0
  assign btn0$D_IN = x__h2179 >= 4'd4 ;
  assign btn0$EN = btdecelerator == 8'd0 ;

  // register btn1
  assign btn1$D_IN = x__h2565 >= 4'd4 ;
  assign btn1$EN = btdecelerator == 8'd0 ;

  // register btn1stream
  assign btn1stream$D_IN = { btn1stream[6:0], btnin[0] } ;
  assign btn1stream$EN = btdecelerator == 8'd0 ;

  // register btn2
  assign btn2$D_IN = x__h2939 >= 4'd4 ;
  assign btn2$EN = btdecelerator == 8'd0 ;

  // register btn2stream
  assign btn2stream$D_IN = { btn2stream[6:0], btnin[1] } ;
  assign btn2stream$EN = btdecelerator == 8'd0 ;

  // register btn3stream
  assign btn3stream$D_IN = { btn3stream[6:0], btnin[2] } ;
  assign btn3stream$EN = btdecelerator == 8'd0 ;

  // register btnin
  assign btnin$D_IN = updateInput_btns ;
  assign btnin$EN = EN_updateInput ;

  // register counterAnodeSelected
  assign counterAnodeSelected$D_IN = counterAnodeSelected + 15'd1 ;
  assign counterAnodeSelected$EN = !takeInput_ULE_8___d145 ;

  // register counterblinker
  assign counterblinker$D_IN = counterblinker + 23'd1 ;
  assign counterblinker$EN = 1'd1 ;

  // register led
  always@(MUX_led$write_1__SEL_1 or
	  MUX_led$write_1__VAL_1 or
	  MUX_led$write_1__SEL_2 or
	  MUX_led$write_1__VAL_2 or
	  MUX_led$write_1__SEL_3 or
	  MUX_led$write_1__VAL_3 or
	  takeInput_ULE_8___d145 or MUX_led$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_led$write_1__SEL_1: led$D_IN = MUX_led$write_1__VAL_1;
      MUX_led$write_1__SEL_2: led$D_IN = MUX_led$write_1__VAL_2;
      MUX_led$write_1__SEL_3: led$D_IN = MUX_led$write_1__VAL_3;
      !takeInput_ULE_8___d145: led$D_IN = MUX_led$write_1__VAL_4;
      default: led$D_IN = 4'b1010 /* unspecified value */ ;
    endcase
  end
  assign led$EN =
	     takeInput == 18'd0 &&
	     NOT_btn0_00_13_AND_btn1_14_AND_setState_01_EQ__ETC___d119 ||
	     WILL_FIRE_RL_settingmmssrule &&
	     (setState == 3'd1 || setState == 3'd2 || setState == 3'd3 ||
	      setState == 3'd4) ||
	     (WILL_FIRE_RL_settingalarmrule ||
	      WILL_FIRE_RL_settinghhmmrule) &&
	     (setState == 3'd1 || setState == 3'd2 || setState == 3'd3 ||
	      setState == 3'd4) ||
	     !takeInput_ULE_8___d145 ;

  // register mode
  always@(MUX_mode$write_1__SEL_1 or
	  MUX_mode$write_1__SEL_2 or
	  MUX_mode$write_1__SEL_3 or
	  MUX_mode$write_1__SEL_4 or MUX_mode$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_mode$write_1__SEL_1: mode$D_IN = 3'd0;
      MUX_mode$write_1__SEL_2: mode$D_IN = 3'd1;
      MUX_mode$write_1__SEL_3: mode$D_IN = 3'd2;
      MUX_mode$write_1__SEL_4: mode$D_IN = MUX_mode$write_1__VAL_4;
      default: mode$D_IN = 3'b010 /* unspecified value */ ;
    endcase
  end
  assign mode$EN =
	     WILL_FIRE_RL_settinghhmmrule && setState == 3'd4 && btn1 ||
	     WILL_FIRE_RL_settingmmssrule && setState == 3'd4 && btn1 ||
	     WILL_FIRE_RL_settingalarmrule && setState == 3'd4 && btn1 ||
	     takeInput == 18'd0 &&
	     (btn0_00_AND_setState_01_EQ_0_02_03_AND_mode_04_ETC___d112 ||
	      NOT_btn0_00_13_AND_btn1_14_AND_setState_01_EQ__ETC___d119) ;

  // register segmentData
  always@(anodeSelected or
	  h2s3$decode or h2s0$decode or h2s1$decode or h2s2$decode)
  begin
    case (anodeSelected)
      2'b0: segmentData$D_IN = h2s0$decode;
      2'b01: segmentData$D_IN = h2s1$decode;
      2'b10: segmentData$D_IN = h2s2$decode;
      2'd3: segmentData$D_IN = h2s3$decode;
    endcase
  end
  assign segmentData$EN = !takeInput_ULE_8___d145 ;

  // register setState
  always@(MUX_led$write_1__SEL_1 or
	  MUX_setState$write_1__SEL_2 or
	  MUX_setState$write_1__VAL_2 or MUX_setState$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_led$write_1__SEL_1: setState$D_IN = 3'd1;
      MUX_setState$write_1__SEL_2:
	  setState$D_IN = MUX_setState$write_1__VAL_2;
      MUX_setState$write_1__SEL_3:
	  setState$D_IN = MUX_setState$write_1__VAL_2;
      default: setState$D_IN = 3'b010 /* unspecified value */ ;
    endcase
  end
  assign setState$EN =
	     takeInput == 18'd0 &&
	     NOT_btn0_00_13_AND_btn1_14_AND_setState_01_EQ__ETC___d119 ||
	     (WILL_FIRE_RL_settingalarmrule ||
	      WILL_FIRE_RL_settinghhmmrule) &&
	     setState_01_EQ_1_66_AND_btn2_39_AND_switches_7_ETC___d400 ||
	     WILL_FIRE_RL_settingmmssrule &&
	     setState_01_EQ_1_66_AND_btn2_39_AND_switches_7_ETC___d463 ;

  // register stopWatch1
  assign stopWatch1$D_IN =
	     MUX_stopWatch1$write_1__SEL_1 ?
	       4'd0 :
	       MUX_stopWatch1$write_1__VAL_2 ;
  assign stopWatch1$EN =
	     stopWatchState && stopWatchDecelerator == 18'd0 ||
	     takeInput == 18'd0 && !btn0 && !btn1 &&
	     NOT_stopWatchState_36_37_AND_btn2_39_40_AND_se_ETC___d142 ;

  // register stopWatch2
  assign stopWatch2$D_IN =
	     MUX_stopWatch1$write_1__SEL_1 ?
	       4'd0 :
	       MUX_stopWatch2$write_1__VAL_2 ;
  assign stopWatch2$EN =
	     takeInput == 18'd0 && !btn0 && !btn1 &&
	     NOT_stopWatchState_36_37_AND_btn2_39_40_AND_se_ETC___d142 ||
	     stopWatchState && stopWatchDecelerator == 18'd0 &&
	     stopWatch1 == 4'd9 ;

  // register stopWatch3
  assign stopWatch3$D_IN =
	     MUX_stopWatch1$write_1__SEL_1 ?
	       4'd0 :
	       MUX_stopWatch3$write_1__VAL_2 ;
  assign stopWatch3$EN =
	     takeInput == 18'd0 && !btn0 && !btn1 &&
	     NOT_stopWatchState_36_37_AND_btn2_39_40_AND_se_ETC___d142 ||
	     stopWatchState && stopWatchDecelerator == 18'd0 &&
	     stopWatch1 == 4'd9 &&
	     stopWatch2 == 4'd9 ;

  // register stopWatch4
  assign stopWatch4$D_IN =
	     MUX_stopWatch1$write_1__SEL_1 ?
	       4'd0 :
	       MUX_stopWatch4$write_1__VAL_2 ;
  assign stopWatch4$EN =
	     takeInput == 18'd0 && !btn0 && !btn1 &&
	     NOT_stopWatchState_36_37_AND_btn2_39_40_AND_se_ETC___d142 ||
	     stopWatchState &&
	     stopWatchDecelerator_82_EQ_0_84_AND_stopWatch1_ETC___d202 ;

  // register stopWatchDecelerator
  assign stopWatchDecelerator$D_IN = stopWatchDecelerator + 18'd1 ;
  assign stopWatchDecelerator$EN = stopWatchState ;

  // register stopWatchState
  assign stopWatchState$D_IN = !stopWatchState ;
  assign stopWatchState$EN =
	     takeInput == 18'd0 && !btn0 && btn1 && setState == 3'd0 &&
	     mode == 3'd3 ;

  // register switches
  assign switches$D_IN = updateInput_swtchs ;
  assign switches$EN = EN_updateInput ;

  // register takeInput
  assign takeInput$D_IN = takeInput + 18'd1 ;
  assign takeInput$EN = 1'd1 ;

  // register toShow1
  always@(MUX_toShow1$write_1__SEL_1 or
	  IF_switches_74_ULT_10_30_THEN_switches_74_ELSE_ETC___d453 or
	  mode or
	  stopWatch1 or
	  IF_clock_dataHHMM__48_BITS_5_TO_0_52_ULT_10_07_ETC___d224 or
	  IF_clock_dataMMSS__58_BITS_5_TO_0_59_ULT_10_60_ETC___d277 or
	  IF_alarmMM_51_ULT_10_11_THEN_alarmMM_51_ELSE_I_ETC___d328)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_toShow1$write_1__SEL_1:
	  toShow1$D_IN =
	      IF_switches_74_ULT_10_30_THEN_switches_74_ELSE_ETC___d453[3:0];
      mode == 3'd3: toShow1$D_IN = stopWatch1;
      mode == 3'd0:
	  toShow1$D_IN =
	      IF_clock_dataHHMM__48_BITS_5_TO_0_52_ULT_10_07_ETC___d224[3:0];
      mode == 3'd1:
	  toShow1$D_IN =
	      IF_clock_dataMMSS__58_BITS_5_TO_0_59_ULT_10_60_ETC___d277[3:0];
      mode == 3'd2:
	  toShow1$D_IN =
	      IF_alarmMM_51_ULT_10_11_THEN_alarmMM_51_ELSE_I_ETC___d328[3:0];
      default: toShow1$D_IN = 4'b1010 /* unspecified value */ ;
    endcase
  end
  assign toShow1$EN =
	     (WILL_FIRE_RL_settingalarmrule || WILL_FIRE_RL_settingmmssrule ||
	      WILL_FIRE_RL_settinghhmmrule) &&
	     setState == 3'd3 ||
	     mode == 3'd3 ||
	     mode == 3'd0 ||
	     mode == 3'd1 ||
	     mode == 3'd2 ;

  // register toShow2
  always@(MUX_toShow2$write_1__SEL_1 or
	  MUX_toShow2$write_1__VAL_1 or
	  mode or
	  stopWatch2 or
	  MUX_toShow2$write_1__VAL_3 or
	  MUX_toShow2$write_1__VAL_4 or MUX_toShow2$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_toShow2$write_1__SEL_1: toShow2$D_IN = MUX_toShow2$write_1__VAL_1;
      mode == 3'd3: toShow2$D_IN = stopWatch2;
      mode == 3'd0: toShow2$D_IN = MUX_toShow2$write_1__VAL_3;
      mode == 3'd1: toShow2$D_IN = MUX_toShow2$write_1__VAL_4;
      mode == 3'd2: toShow2$D_IN = MUX_toShow2$write_1__VAL_5;
      default: toShow2$D_IN = 4'b1010 /* unspecified value */ ;
    endcase
  end
  assign toShow2$EN =
	     (WILL_FIRE_RL_settingalarmrule || WILL_FIRE_RL_settingmmssrule ||
	      WILL_FIRE_RL_settinghhmmrule) &&
	     setState == 3'd3 ||
	     mode == 3'd3 ||
	     mode == 3'd0 ||
	     mode == 3'd1 ||
	     mode == 3'd2 ;

  // register toShow3
  always@(MUX_toShow3$write_1__SEL_1 or
	  IF_0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_UL_ETC___d422 or
	  MUX_toShow3$write_1__SEL_2 or
	  IF_switches_74_ULT_10_30_THEN_switches_74_ELSE_ETC___d453 or
	  mode or
	  stopWatch3 or
	  IF_0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6__ETC___d250 or
	  IF_clock_dataMMSS__58_BITS_11_TO_6_85_ULT_10_8_ETC___d303 or
	  IF_0b0_CONCAT_alarmHH_47_36_ULT_10_37_THEN_0b0_ETC___d354)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_toShow3$write_1__SEL_1:
	  toShow3$D_IN =
	      IF_0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_UL_ETC___d422[3:0];
      MUX_toShow3$write_1__SEL_2:
	  toShow3$D_IN =
	      IF_switches_74_ULT_10_30_THEN_switches_74_ELSE_ETC___d453[3:0];
      mode == 3'd3: toShow3$D_IN = stopWatch3;
      mode == 3'd0:
	  toShow3$D_IN =
	      IF_0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6__ETC___d250[3:0];
      mode == 3'd1:
	  toShow3$D_IN =
	      IF_clock_dataMMSS__58_BITS_11_TO_6_85_ULT_10_8_ETC___d303[3:0];
      mode == 3'd2:
	  toShow3$D_IN =
	      IF_0b0_CONCAT_alarmHH_47_36_ULT_10_37_THEN_0b0_ETC___d354[3:0];
      default: toShow3$D_IN = 4'b1010 /* unspecified value */ ;
    endcase
  end
  assign toShow3$EN =
	     WILL_FIRE_RL_settinghhmmrule && setState == 3'd1 ||
	     (WILL_FIRE_RL_settingalarmrule ||
	      WILL_FIRE_RL_settingmmssrule) &&
	     setState == 3'd1 ||
	     mode == 3'd3 ||
	     mode == 3'd0 ||
	     mode == 3'd1 ||
	     mode == 3'd2 ;

  // register toShow4
  always@(MUX_toShow3$write_1__SEL_1 or
	  MUX_toShow4$write_1__VAL_1 or
	  MUX_toShow4$write_1__SEL_2 or
	  MUX_toShow2$write_1__VAL_1 or
	  mode or
	  stopWatch4 or
	  MUX_toShow4$write_1__VAL_4 or
	  MUX_toShow4$write_1__VAL_5 or MUX_toShow4$write_1__VAL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_toShow3$write_1__SEL_1: toShow4$D_IN = MUX_toShow4$write_1__VAL_1;
      MUX_toShow4$write_1__SEL_2: toShow4$D_IN = MUX_toShow2$write_1__VAL_1;
      mode == 3'd3: toShow4$D_IN = stopWatch4;
      mode == 3'd0: toShow4$D_IN = MUX_toShow4$write_1__VAL_4;
      mode == 3'd1: toShow4$D_IN = MUX_toShow4$write_1__VAL_5;
      mode == 3'd2: toShow4$D_IN = MUX_toShow4$write_1__VAL_6;
      default: toShow4$D_IN = 4'b1010 /* unspecified value */ ;
    endcase
  end
  assign toShow4$EN =
	     WILL_FIRE_RL_settinghhmmrule && setState == 3'd1 ||
	     (WILL_FIRE_RL_settingalarmrule ||
	      WILL_FIRE_RL_settingmmssrule) &&
	     setState == 3'd1 ||
	     mode == 3'd3 ||
	     mode == 3'd0 ||
	     mode == 3'd1 ||
	     mode == 3'd2 ;

  // submodule clock
  assign clock$setHH_hh = switches[4:0] ;
  assign clock$setMM_mm = switches ;
  assign clock$setSS_ss = switches ;
  assign clock$EN_pause =
	     takeInput == 18'd0 && !btn0 && btn1 && setState == 3'd0 &&
	     (mode == 3'd0 || mode == 3'd1) ;
  assign clock$EN_start = _dor1clock$EN_start && setState == 3'd4 && btn1 ;
  assign clock$EN_setHH =
	     WILL_FIRE_RL_settinghhmmrule && setState == 3'd1 && btn2 &&
	     switches[4:0] < 5'd24 ;
  assign clock$EN_setMM =
	     WILL_FIRE_RL_settinghhmmrule && setState == 3'd3 && btn2 &&
	     switches < 6'd60 ||
	     WILL_FIRE_RL_settingmmssrule && setState == 3'd1 && btn2 &&
	     switches < 6'd60 ;
  assign clock$EN_setSS =
	     WILL_FIRE_RL_settingmmssrule && setState == 3'd3 && btn2 &&
	     switches < 6'd60 ;

  // submodule h2s0
  assign h2s0$decode_hex = toShow4 ;

  // submodule h2s1
  assign h2s1$decode_hex = toShow3 ;

  // submodule h2s2
  assign h2s2$decode_hex = toShow2 ;

  // submodule h2s3
  assign h2s3$decode_hex = toShow1 ;

  // remaining internal signals
  assign IF_0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS__ETC___d350 =
	     _0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS_10__ETC___d593 ?
	       _0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS_10__ETC___d518 :
	       (_0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS_10__ETC___d594 ?
		  _0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS_10__ETC___d519 :
		  _0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS_10__ETC___d519 -
		  6'd10) ;
  assign IF_0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS__ETC___d352 =
	     _0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS_10__ETC___d591 ?
	       _0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS_10___d516 :
	       (_0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS_10__ETC___d592 ?
		  _0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS_10__ETC___d517 :
		  IF_0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS__ETC___d350) ;
  assign IF_0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS__ETC___d358 =
	     _0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS_10__ETC___d592 ?
	       4'd3 :
	       (_0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS_10__ETC___d593 ?
		  4'd4 :
		  (_0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS_10__ETC___d594 ?
		     4'd5 :
		     4'd6)) ;
  assign IF_0b0_CONCAT_alarmHH_47_36_MINUS_10_38_ULT_10_ETC___d360 =
	     _0b0_CONCAT_alarmHH_47_36_MINUS_10_38_ULT_10___d590 ?
	       4'd1 :
	       (_0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS_10__ETC___d591 ?
		  4'd2 :
		  IF_0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS__ETC___d358) ;
  assign IF_0b0_CONCAT_alarmHH_47_36_ULT_10_37_THEN_0b0_ETC___d354 =
	     _0b0_CONCAT_alarmHH_47_36_ULT_10___d589 ?
	       given__h6118 :
	       (_0b0_CONCAT_alarmHH_47_36_MINUS_10_38_ULT_10___d590 ?
		  _0b0_CONCAT_alarmHH_47_36_MINUS_10___d515 :
		  IF_0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS__ETC___d352) ;
  assign IF_0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6__ETC___d246 =
	     _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d569 ?
	       _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d498 :
	       (_0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d570 ?
		  _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d499 :
		  _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d499 -
		  6'd10) ;
  assign IF_0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6__ETC___d248 =
	     _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d567 ?
	       _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d496 :
	       (_0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d568 ?
		  _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d497 :
		  IF_0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6__ETC___d246) ;
  assign IF_0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6__ETC___d250 =
	     _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d565 ?
	       given__h5131 :
	       (_0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d566 ?
		  _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d495 :
		  IF_0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6__ETC___d248) ;
  assign IF_0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6__ETC___d254 =
	     _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d568 ?
	       4'd3 :
	       (_0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d569 ?
		  4'd4 :
		  (_0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d570 ?
		     4'd5 :
		     4'd6)) ;
  assign IF_0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6__ETC___d256 =
	     _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d566 ?
	       4'd1 :
	       (_0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d567 ?
		  4'd2 :
		  IF_0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6__ETC___d254) ;
  assign IF_0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MI_ETC___d418 =
	     _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d599 ?
	       _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d523 :
	       (_0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d600 ?
		  _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d524 :
		  _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d524 -
		  6'd10) ;
  assign IF_0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MI_ETC___d420 =
	     _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d597 ?
	       _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d521 :
	       (_0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d598 ?
		  _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d522 :
		  IF_0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MI_ETC___d418) ;
  assign IF_0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MI_ETC___d426 =
	     _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d598 ?
	       4'd3 :
	       (_0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d599 ?
		  4'd4 :
		  (_0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d600 ?
		     4'd5 :
		     4'd6)) ;
  assign IF_0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MI_ETC___d428 =
	     _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d596 ?
	       4'd1 :
	       (_0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d597 ?
		  4'd2 :
		  IF_0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MI_ETC___d426) ;
  assign IF_0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_UL_ETC___d422 =
	     _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_ULT_10___d595 ?
	       given__h6840 :
	       (_0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d596 ?
		  _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_10___d520 :
		  IF_0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MI_ETC___d420) ;
  assign IF_alarmMM_51_MINUS_10_12_MINUS_10_14_MINUS_10_ETC___d324 =
	     alarmMM_51_MINUS_10_12_MINUS_10_14_MINUS_10_16_ETC___d587 ?
	       alarmMM_51_MINUS_10_12_MINUS_10_14_MINUS_10_16_ETC___d513 :
	       (alarmMM_51_MINUS_10_12_MINUS_10_14_MINUS_10_16_ETC___d588 ?
		  alarmMM_51_MINUS_10_12_MINUS_10_14_MINUS_10_16_ETC___d514 :
		  alarmMM_51_MINUS_10_12_MINUS_10_14_MINUS_10_16_ETC___d514 -
		  6'd10) ;
  assign IF_alarmMM_51_MINUS_10_12_MINUS_10_14_MINUS_10_ETC___d332 =
	     alarmMM_51_MINUS_10_12_MINUS_10_14_MINUS_10_16_ETC___d586 ?
	       4'd3 :
	       (alarmMM_51_MINUS_10_12_MINUS_10_14_MINUS_10_16_ETC___d587 ?
		  4'd4 :
		  (alarmMM_51_MINUS_10_12_MINUS_10_14_MINUS_10_16_ETC___d588 ?
		     4'd5 :
		     4'd6)) ;
  assign IF_alarmMM_51_MINUS_10_12_MINUS_10_14_ULT_10_1_ETC___d326 =
	     alarmMM_51_MINUS_10_12_MINUS_10_14_ULT_10___d585 ?
	       alarmMM_51_MINUS_10_12_MINUS_10___d511 :
	       (alarmMM_51_MINUS_10_12_MINUS_10_14_MINUS_10_16_ETC___d586 ?
		  alarmMM_51_MINUS_10_12_MINUS_10_14_MINUS_10___d512 :
		  IF_alarmMM_51_MINUS_10_12_MINUS_10_14_MINUS_10_ETC___d324) ;
  assign IF_alarmMM_51_MINUS_10_12_ULT_10_13_THEN_1_ELS_ETC___d334 =
	     alarmMM_51_MINUS_10_12_ULT_10___d584 ?
	       4'd1 :
	       (alarmMM_51_MINUS_10_12_MINUS_10_14_ULT_10___d585 ?
		  4'd2 :
		  IF_alarmMM_51_MINUS_10_12_MINUS_10_14_MINUS_10_ETC___d332) ;
  assign IF_alarmMM_51_ULT_10_11_THEN_alarmMM_51_ELSE_I_ETC___d328 =
	     alarmMM_51_ULT_10___d583 ?
	       alarmMM :
	       (alarmMM_51_MINUS_10_12_ULT_10___d584 ?
		  alarmMM_51_MINUS_10___d510 :
		  IF_alarmMM_51_MINUS_10_12_MINUS_10_14_ULT_10_1_ETC___d326) ;
  assign IF_btn1stream_BIT_0_8_THEN_1_ELSE_0___d469 =
	     btn1stream[0] ? 4'd1 : 4'd0 ;
  assign IF_btn1stream_BIT_1_7_THEN_IF_btn1stream_BIT_0_ETC___d470 =
	     btn1stream[1] ?
	       one__h2446 :
	       IF_btn1stream_BIT_0_8_THEN_1_ELSE_0___d469 ;
  assign IF_btn1stream_BIT_2_6_THEN_IF_btn1stream_BIT_1_ETC___d471 =
	     btn1stream[2] ?
	       one__h2417 :
	       IF_btn1stream_BIT_1_7_THEN_IF_btn1stream_BIT_0_ETC___d470 ;
  assign IF_btn1stream_BIT_3_5_THEN_IF_btn1stream_BIT_2_ETC___d472 =
	     btn1stream[3] ?
	       one__h2388 :
	       IF_btn1stream_BIT_2_6_THEN_IF_btn1stream_BIT_1_ETC___d471 ;
  assign IF_btn1stream_BIT_4_4_THEN_IF_btn1stream_BIT_3_ETC___d473 =
	     btn1stream[4] ?
	       one__h2359 :
	       IF_btn1stream_BIT_3_5_THEN_IF_btn1stream_BIT_2_ETC___d472 ;
  assign IF_btn1stream_BIT_5_3_THEN_IF_btn1stream_BIT_4_ETC___d474 =
	     btn1stream[5] ?
	       one__h2330 :
	       IF_btn1stream_BIT_4_4_THEN_IF_btn1stream_BIT_3_ETC___d473 ;
  assign IF_btn1stream_BIT_6_2_THEN_IF_btn1stream_BIT_5_ETC___d475 =
	     btn1stream[6] ?
	       one__h2301 :
	       IF_btn1stream_BIT_5_3_THEN_IF_btn1stream_BIT_4_ETC___d474 ;
  assign IF_btn2stream_3_BIT_0_3_THEN_1_ELSE_0___d476 =
	     btn2stream[0] ? 4'd1 : 4'd0 ;
  assign IF_btn2stream_3_BIT_1_2_THEN_IF_btn2stream_3_B_ETC___d477 =
	     btn2stream[1] ?
	       one__h2832 :
	       IF_btn2stream_3_BIT_0_3_THEN_1_ELSE_0___d476 ;
  assign IF_btn2stream_3_BIT_2_1_THEN_IF_btn2stream_3_B_ETC___d478 =
	     btn2stream[2] ?
	       one__h2803 :
	       IF_btn2stream_3_BIT_1_2_THEN_IF_btn2stream_3_B_ETC___d477 ;
  assign IF_btn2stream_3_BIT_3_0_THEN_IF_btn2stream_3_B_ETC___d479 =
	     btn2stream[3] ?
	       one__h2774 :
	       IF_btn2stream_3_BIT_2_1_THEN_IF_btn2stream_3_B_ETC___d478 ;
  assign IF_btn2stream_3_BIT_4_9_THEN_IF_btn2stream_3_B_ETC___d480 =
	     btn2stream[4] ?
	       one__h2745 :
	       IF_btn2stream_3_BIT_3_0_THEN_IF_btn2stream_3_B_ETC___d479 ;
  assign IF_btn2stream_3_BIT_5_8_THEN_IF_btn2stream_3_B_ETC___d481 =
	     btn2stream[5] ?
	       one__h2716 :
	       IF_btn2stream_3_BIT_4_9_THEN_IF_btn2stream_3_B_ETC___d480 ;
  assign IF_btn2stream_3_BIT_6_7_THEN_IF_btn2stream_3_B_ETC___d482 =
	     btn2stream[6] ?
	       one__h2687 :
	       IF_btn2stream_3_BIT_5_8_THEN_IF_btn2stream_3_B_ETC___d481 ;
  assign IF_btn3stream_7_BIT_0_8_THEN_1_ELSE_0___d483 =
	     btn3stream[0] ? 4'd1 : 4'd0 ;
  assign IF_btn3stream_7_BIT_1_7_THEN_IF_btn3stream_7_B_ETC___d484 =
	     btn3stream[1] ?
	       one__h3206 :
	       IF_btn3stream_7_BIT_0_8_THEN_1_ELSE_0___d483 ;
  assign IF_btn3stream_7_BIT_2_6_THEN_IF_btn3stream_7_B_ETC___d485 =
	     btn3stream[2] ?
	       one__h3177 :
	       IF_btn3stream_7_BIT_1_7_THEN_IF_btn3stream_7_B_ETC___d484 ;
  assign IF_btn3stream_7_BIT_3_5_THEN_IF_btn3stream_7_B_ETC___d486 =
	     btn3stream[3] ?
	       one__h3148 :
	       IF_btn3stream_7_BIT_2_6_THEN_IF_btn3stream_7_B_ETC___d485 ;
  assign IF_btn3stream_7_BIT_4_4_THEN_IF_btn3stream_7_B_ETC___d487 =
	     btn3stream[4] ?
	       one__h3119 :
	       IF_btn3stream_7_BIT_3_5_THEN_IF_btn3stream_7_B_ETC___d486 ;
  assign IF_btn3stream_7_BIT_5_3_THEN_IF_btn3stream_7_B_ETC___d488 =
	     btn3stream[5] ?
	       one__h3090 :
	       IF_btn3stream_7_BIT_4_4_THEN_IF_btn3stream_7_B_ETC___d487 ;
  assign IF_btn3stream_7_BIT_6_2_THEN_IF_btn3stream_7_B_ETC___d489 =
	     btn3stream[6] ?
	       one__h3061 :
	       IF_btn3stream_7_BIT_5_3_THEN_IF_btn3stream_7_B_ETC___d488 ;
  assign IF_clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10__ETC___d220 =
	     clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d563 ?
	       clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d493 :
	       (clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d564 ?
		  clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d494 :
		  clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d494 -
		  6'd10) ;
  assign IF_clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10__ETC___d222 =
	     clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d561 ?
	       clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d491 :
	       (clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d562 ?
		  clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d492 :
		  IF_clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10__ETC___d220) ;
  assign IF_clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10__ETC___d228 =
	     clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d562 ?
	       4'd3 :
	       (clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d563 ?
		  4'd4 :
		  (clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d564 ?
		     4'd5 :
		     4'd6)) ;
  assign IF_clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10__ETC___d230 =
	     clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d560 ?
	       4'd1 :
	       (clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d561 ?
		  4'd2 :
		  IF_clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10__ETC___d228) ;
  assign IF_clock_dataHHMM__48_BITS_5_TO_0_52_ULT_10_07_ETC___d224 =
	     clock_dataHHMM__48_BITS_5_TO_0_52_ULT_10___d559 ?
	       clock$dataHHMM[5:0] :
	       (clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d560 ?
		  clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10___d490 :
		  IF_clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10__ETC___d222) ;
  assign IF_clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_ETC___d299 =
	     clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d581 ?
	       clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d508 :
	       (clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d582 ?
		  clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d509 :
		  clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d509 -
		  6'd10) ;
  assign IF_clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_ETC___d301 =
	     clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d579 ?
	       clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d506 :
	       (clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d580 ?
		  clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d507 :
		  IF_clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_ETC___d299) ;
  assign IF_clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_ETC___d307 =
	     clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d580 ?
	       4'd3 :
	       (clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d581 ?
		  4'd4 :
		  (clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d582 ?
		     4'd5 :
		     4'd6)) ;
  assign IF_clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_ETC___d309 =
	     clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d578 ?
	       4'd1 :
	       (clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d579 ?
		  4'd2 :
		  IF_clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_ETC___d307) ;
  assign IF_clock_dataMMSS__58_BITS_11_TO_6_85_ULT_10_8_ETC___d303 =
	     clock_dataMMSS__58_BITS_11_TO_6_85_ULT_10___d577 ?
	       clock$dataMMSS[11:6] :
	       (clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d578 ?
		  clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10___d505 :
		  IF_clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_ETC___d301) ;
  assign IF_clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10__ETC___d273 =
	     clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d575 ?
	       clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d503 :
	       (clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d576 ?
		  clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d504 :
		  clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d504 -
		  6'd10) ;
  assign IF_clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10__ETC___d275 =
	     clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d573 ?
	       clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d501 :
	       (clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d574 ?
		  clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d502 :
		  IF_clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10__ETC___d273) ;
  assign IF_clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10__ETC___d281 =
	     clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d574 ?
	       4'd3 :
	       (clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d575 ?
		  4'd4 :
		  (clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d576 ?
		     4'd5 :
		     4'd6)) ;
  assign IF_clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10__ETC___d283 =
	     clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d572 ?
	       4'd1 :
	       (clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d573 ?
		  4'd2 :
		  IF_clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10__ETC___d281) ;
  assign IF_clock_dataMMSS__58_BITS_5_TO_0_59_ULT_10_60_ETC___d277 =
	     clock_dataMMSS__58_BITS_5_TO_0_59_ULT_10___d571 ?
	       clock$dataMMSS[5:0] :
	       (clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d572 ?
		  clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10___d500 :
		  IF_clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10__ETC___d275) ;
  assign IF_switches_74_MINUS_10_31_MINUS_10_33_MINUS_1_ETC___d443 =
	     switches_74_MINUS_10_31_MINUS_10_33_MINUS_10_3_ETC___d604 ?
	       4'd3 :
	       (switches_74_MINUS_10_31_MINUS_10_33_MINUS_10_3_ETC___d605 ?
		  4'd4 :
		  (switches_74_MINUS_10_31_MINUS_10_33_MINUS_10_3_ETC___d606 ?
		     4'd5 :
		     4'd6)) ;
  assign IF_switches_74_MINUS_10_31_MINUS_10_33_MINUS_1_ETC___d449 =
	     switches_74_MINUS_10_31_MINUS_10_33_MINUS_10_3_ETC___d605 ?
	       switches_74_MINUS_10_31_MINUS_10_33_MINUS_10_3_ETC___d528 :
	       (switches_74_MINUS_10_31_MINUS_10_33_MINUS_10_3_ETC___d606 ?
		  switches_74_MINUS_10_31_MINUS_10_33_MINUS_10_3_ETC___d529 :
		  switches_74_MINUS_10_31_MINUS_10_33_MINUS_10_3_ETC___d529 -
		  6'd10) ;
  assign IF_switches_74_MINUS_10_31_MINUS_10_33_ULT_10__ETC___d451 =
	     switches_74_MINUS_10_31_MINUS_10_33_ULT_10___d603 ?
	       switches_74_MINUS_10_31_MINUS_10___d526 :
	       (switches_74_MINUS_10_31_MINUS_10_33_MINUS_10_3_ETC___d604 ?
		  switches_74_MINUS_10_31_MINUS_10_33_MINUS_10___d527 :
		  IF_switches_74_MINUS_10_31_MINUS_10_33_MINUS_1_ETC___d449) ;
  assign IF_switches_74_MINUS_10_31_ULT_10_32_THEN_1_EL_ETC___d445 =
	     switches_74_MINUS_10_31_ULT_10___d602 ?
	       4'd1 :
	       (switches_74_MINUS_10_31_MINUS_10_33_ULT_10___d603 ?
		  4'd2 :
		  IF_switches_74_MINUS_10_31_MINUS_10_33_MINUS_1_ETC___d443) ;
  assign IF_switches_74_ULT_10_30_THEN_switches_74_ELSE_ETC___d453 =
	     switches_74_ULT_10___d601 ?
	       switches :
	       (switches_74_MINUS_10_31_ULT_10___d602 ?
		  switches_74_MINUS_10___d525 :
		  IF_switches_74_MINUS_10_31_MINUS_10_33_ULT_10__ETC___d451) ;
  assign NOT_btn0_00_13_AND_btn1_14_AND_setState_01_EQ__ETC___d119 =
	     !btn0 && btn1 && setState == 3'd0 &&
	     (mode == 3'd0 || mode == 3'd1 || mode == 3'd2) ;
  assign NOT_stopWatchState_36_37_AND_btn2_39_40_AND_se_ETC___d142 =
	     !stopWatchState && btn2 && setState == 3'd0 && mode == 3'd3 ;
  assign _0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS_10__ETC___d517 =
	     _0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS_10___d516 - 6'd10 ;
  assign _0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS_10__ETC___d518 =
	     _0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS_10__ETC___d517 -
	     6'd10 ;
  assign _0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS_10__ETC___d519 =
	     _0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS_10__ETC___d518 -
	     6'd10 ;
  assign _0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS_10__ETC___d591 =
	     _0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS_10___d516 < 6'd10 ;
  assign _0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS_10__ETC___d592 =
	     _0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS_10__ETC___d517 <
	     6'd10 ;
  assign _0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS_10__ETC___d593 =
	     _0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS_10__ETC___d518 <
	     6'd10 ;
  assign _0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS_10__ETC___d594 =
	     _0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS_10__ETC___d519 <
	     6'd10 ;
  assign _0b0_CONCAT_alarmHH_47_36_MINUS_10_38_MINUS_10___d516 =
	     _0b0_CONCAT_alarmHH_47_36_MINUS_10___d515 - 6'd10 ;
  assign _0b0_CONCAT_alarmHH_47_36_MINUS_10_38_ULT_10___d590 =
	     _0b0_CONCAT_alarmHH_47_36_MINUS_10___d515 < 6'd10 ;
  assign _0b0_CONCAT_alarmHH_47_36_MINUS_10___d515 = given__h6118 - 6'd10 ;
  assign _0b0_CONCAT_alarmHH_47_36_ULT_10___d589 = given__h6118 < 6'd10 ;
  assign _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d495 =
	     given__h5131 - 6'd10 ;
  assign _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d496 =
	     _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d495 -
	     6'd10 ;
  assign _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d497 =
	     _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d496 -
	     6'd10 ;
  assign _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d498 =
	     _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d497 -
	     6'd10 ;
  assign _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d499 =
	     _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d498 -
	     6'd10 ;
  assign _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d565 =
	     given__h5131 < 6'd10 ;
  assign _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d566 =
	     _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d495 <
	     6'd10 ;
  assign _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d567 =
	     _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d496 <
	     6'd10 ;
  assign _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d568 =
	     _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d497 <
	     6'd10 ;
  assign _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d569 =
	     _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d498 <
	     6'd10 ;
  assign _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d570 =
	     _0b0_CONCAT_clock_dataHHMM__48_BITS_10_TO_6_49__ETC___d499 <
	     6'd10 ;
  assign _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_10___d520 =
	     given__h6840 - 6'd10 ;
  assign _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d521 =
	     _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_10___d520 -
	     6'd10 ;
  assign _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d522 =
	     _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d521 -
	     6'd10 ;
  assign _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d523 =
	     _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d522 -
	     6'd10 ;
  assign _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d524 =
	     _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d523 -
	     6'd10 ;
  assign _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d596 =
	     _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_10___d520 <
	     6'd10 ;
  assign _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d597 =
	     _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d521 <
	     6'd10 ;
  assign _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d598 =
	     _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d522 <
	     6'd10 ;
  assign _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d599 =
	     _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d523 <
	     6'd10 ;
  assign _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d600 =
	     _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_MINUS_ETC___d524 <
	     6'd10 ;
  assign _0b0_CONCAT_switches_74_BITS_4_TO_0_75_04_ULT_10___d595 =
	     given__h6840 < 6'd10 ;
  assign _dor1clock$EN_start =
	     WILL_FIRE_RL_settingmmssrule || WILL_FIRE_RL_settinghhmmrule ;
  assign alarmMM_51_MINUS_10_12_MINUS_10_14_MINUS_10_16_ETC___d513 =
	     alarmMM_51_MINUS_10_12_MINUS_10_14_MINUS_10___d512 - 6'd10 ;
  assign alarmMM_51_MINUS_10_12_MINUS_10_14_MINUS_10_16_ETC___d514 =
	     alarmMM_51_MINUS_10_12_MINUS_10_14_MINUS_10_16_ETC___d513 -
	     6'd10 ;
  assign alarmMM_51_MINUS_10_12_MINUS_10_14_MINUS_10_16_ETC___d586 =
	     alarmMM_51_MINUS_10_12_MINUS_10_14_MINUS_10___d512 < 6'd10 ;
  assign alarmMM_51_MINUS_10_12_MINUS_10_14_MINUS_10_16_ETC___d587 =
	     alarmMM_51_MINUS_10_12_MINUS_10_14_MINUS_10_16_ETC___d513 <
	     6'd10 ;
  assign alarmMM_51_MINUS_10_12_MINUS_10_14_MINUS_10_16_ETC___d588 =
	     alarmMM_51_MINUS_10_12_MINUS_10_14_MINUS_10_16_ETC___d514 <
	     6'd10 ;
  assign alarmMM_51_MINUS_10_12_MINUS_10_14_MINUS_10___d512 =
	     alarmMM_51_MINUS_10_12_MINUS_10___d511 - 6'd10 ;
  assign alarmMM_51_MINUS_10_12_MINUS_10_14_ULT_10___d585 =
	     alarmMM_51_MINUS_10_12_MINUS_10___d511 < 6'd10 ;
  assign alarmMM_51_MINUS_10_12_MINUS_10___d511 =
	     alarmMM_51_MINUS_10___d510 - 6'd10 ;
  assign alarmMM_51_MINUS_10_12_ULT_10___d584 =
	     alarmMM_51_MINUS_10___d510 < 6'd10 ;
  assign alarmMM_51_MINUS_10___d510 = alarmMM - 6'd10 ;
  assign alarmMM_51_ULT_10___d583 = alarmMM < 6'd10 ;
  assign btn0_00_AND_setState_01_EQ_0_02_03_AND_mode_04_ETC___d112 =
	     btn0 && setState == 3'd0 &&
	     (mode == 3'd0 || mode == 3'd1 || mode == 3'd2 || mode == 3'd3) ;
  assign clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d491 =
	     clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10___d490 - 6'd10 ;
  assign clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d492 =
	     clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d491 -
	     6'd10 ;
  assign clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d493 =
	     clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d492 -
	     6'd10 ;
  assign clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d494 =
	     clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d493 -
	     6'd10 ;
  assign clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d560 =
	     clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10___d490 < 6'd10 ;
  assign clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d561 =
	     clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d491 <
	     6'd10 ;
  assign clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d562 =
	     clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d492 <
	     6'd10 ;
  assign clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d563 =
	     clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d493 <
	     6'd10 ;
  assign clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d564 =
	     clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10_08__ETC___d494 <
	     6'd10 ;
  assign clock_dataHHMM__48_BITS_5_TO_0_52_MINUS_10___d490 =
	     clock$dataHHMM[5:0] - 6'd10 ;
  assign clock_dataHHMM__48_BITS_5_TO_0_52_ULT_10___d559 =
	     clock$dataHHMM[5:0] < 6'd10 ;
  assign clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d506 =
	     clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10___d505 - 6'd10 ;
  assign clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d507 =
	     clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d506 -
	     6'd10 ;
  assign clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d508 =
	     clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d507 -
	     6'd10 ;
  assign clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d509 =
	     clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d508 -
	     6'd10 ;
  assign clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d578 =
	     clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10___d505 < 6'd10 ;
  assign clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d579 =
	     clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d506 <
	     6'd10 ;
  assign clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d580 =
	     clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d507 <
	     6'd10 ;
  assign clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d581 =
	     clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d508 <
	     6'd10 ;
  assign clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d582 =
	     clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10_87_ETC___d509 <
	     6'd10 ;
  assign clock_dataMMSS__58_BITS_11_TO_6_85_MINUS_10___d505 =
	     clock$dataMMSS[11:6] - 6'd10 ;
  assign clock_dataMMSS__58_BITS_11_TO_6_85_ULT_10___d577 =
	     clock$dataMMSS[11:6] < 6'd10 ;
  assign clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d501 =
	     clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10___d500 - 6'd10 ;
  assign clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d502 =
	     clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d501 -
	     6'd10 ;
  assign clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d503 =
	     clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d502 -
	     6'd10 ;
  assign clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d504 =
	     clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d503 -
	     6'd10 ;
  assign clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d572 =
	     clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10___d500 < 6'd10 ;
  assign clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d573 =
	     clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d501 <
	     6'd10 ;
  assign clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d574 =
	     clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d502 <
	     6'd10 ;
  assign clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d575 =
	     clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d503 <
	     6'd10 ;
  assign clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d576 =
	     clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10_61__ETC___d504 <
	     6'd10 ;
  assign clock_dataMMSS__58_BITS_5_TO_0_59_MINUS_10___d500 =
	     clock$dataMMSS[5:0] - 6'd10 ;
  assign clock_dataMMSS__58_BITS_5_TO_0_59_ULT_10___d571 =
	     clock$dataMMSS[5:0] < 6'd10 ;
  assign given__h5131 = { 1'b0, clock$dataHHMM[10:6] } ;
  assign given__h6118 = { 1'b0, alarmHH } ;
  assign given__h6840 = { 1'b0, switches[4:0] } ;
  assign one__h2272 =
	     IF_btn1stream_BIT_6_2_THEN_IF_btn1stream_BIT_5_ETC___d475 +
	     4'd1 ;
  assign one__h2301 =
	     IF_btn1stream_BIT_5_3_THEN_IF_btn1stream_BIT_4_ETC___d474 +
	     4'd1 ;
  assign one__h2330 =
	     IF_btn1stream_BIT_4_4_THEN_IF_btn1stream_BIT_3_ETC___d473 +
	     4'd1 ;
  assign one__h2359 =
	     IF_btn1stream_BIT_3_5_THEN_IF_btn1stream_BIT_2_ETC___d472 +
	     4'd1 ;
  assign one__h2388 =
	     IF_btn1stream_BIT_2_6_THEN_IF_btn1stream_BIT_1_ETC___d471 +
	     4'd1 ;
  assign one__h2417 =
	     IF_btn1stream_BIT_1_7_THEN_IF_btn1stream_BIT_0_ETC___d470 +
	     4'd1 ;
  assign one__h2446 = IF_btn1stream_BIT_0_8_THEN_1_ELSE_0___d469 + 4'd1 ;
  assign one__h2658 =
	     IF_btn2stream_3_BIT_6_7_THEN_IF_btn2stream_3_B_ETC___d482 +
	     4'd1 ;
  assign one__h2687 =
	     IF_btn2stream_3_BIT_5_8_THEN_IF_btn2stream_3_B_ETC___d481 +
	     4'd1 ;
  assign one__h2716 =
	     IF_btn2stream_3_BIT_4_9_THEN_IF_btn2stream_3_B_ETC___d480 +
	     4'd1 ;
  assign one__h2745 =
	     IF_btn2stream_3_BIT_3_0_THEN_IF_btn2stream_3_B_ETC___d479 +
	     4'd1 ;
  assign one__h2774 =
	     IF_btn2stream_3_BIT_2_1_THEN_IF_btn2stream_3_B_ETC___d478 +
	     4'd1 ;
  assign one__h2803 =
	     IF_btn2stream_3_BIT_1_2_THEN_IF_btn2stream_3_B_ETC___d477 +
	     4'd1 ;
  assign one__h2832 = IF_btn2stream_3_BIT_0_3_THEN_1_ELSE_0___d476 + 4'd1 ;
  assign one__h3032 =
	     IF_btn3stream_7_BIT_6_2_THEN_IF_btn3stream_7_B_ETC___d489 +
	     4'd1 ;
  assign one__h3061 =
	     IF_btn3stream_7_BIT_5_3_THEN_IF_btn3stream_7_B_ETC___d488 +
	     4'd1 ;
  assign one__h3090 =
	     IF_btn3stream_7_BIT_4_4_THEN_IF_btn3stream_7_B_ETC___d487 +
	     4'd1 ;
  assign one__h3119 =
	     IF_btn3stream_7_BIT_3_5_THEN_IF_btn3stream_7_B_ETC___d486 +
	     4'd1 ;
  assign one__h3148 =
	     IF_btn3stream_7_BIT_2_6_THEN_IF_btn3stream_7_B_ETC___d485 +
	     4'd1 ;
  assign one__h3177 =
	     IF_btn3stream_7_BIT_1_7_THEN_IF_btn3stream_7_B_ETC___d484 +
	     4'd1 ;
  assign one__h3206 = IF_btn3stream_7_BIT_0_8_THEN_1_ELSE_0___d483 + 4'd1 ;
  assign setState_01_EQ_1_66_AND_btn2_39_AND_switches_7_ETC___d400 =
	     setState == 3'd1 && btn2 && switches[4:0] < 5'd24 ||
	     setState != 3'd1 &&
	     (setState == 3'd2 && btn1 ||
	      setState != 3'd2 &&
	      setState_01_EQ_3_68_AND_btn2_39_AND_switches_7_ETC___d396) ;
  assign setState_01_EQ_1_66_AND_btn2_39_AND_switches_7_ETC___d463 =
	     setState == 3'd1 && btn2 && switches < 6'd60 ||
	     setState != 3'd1 &&
	     (setState == 3'd2 && btn1 ||
	      setState != 3'd2 &&
	      setState_01_EQ_3_68_AND_btn2_39_AND_switches_7_ETC___d396) ;
  assign setState_01_EQ_3_68_AND_btn2_39_AND_switches_7_ETC___d396 =
	     setState == 3'd3 && btn2 && switches < 6'd60 ||
	     setState == 3'd4 && btn1 ;
  assign stopWatchDecelerator_82_EQ_0_84_AND_stopWatch1_ETC___d202 =
	     stopWatchDecelerator == 18'd0 && stopWatch1 == 4'd9 &&
	     stopWatch2 == 4'd9 &&
	     stopWatch3 == 4'd9 ;
  assign switches_74_MINUS_10_31_MINUS_10_33_MINUS_10_3_ETC___d528 =
	     switches_74_MINUS_10_31_MINUS_10_33_MINUS_10___d527 - 6'd10 ;
  assign switches_74_MINUS_10_31_MINUS_10_33_MINUS_10_3_ETC___d529 =
	     switches_74_MINUS_10_31_MINUS_10_33_MINUS_10_3_ETC___d528 -
	     6'd10 ;
  assign switches_74_MINUS_10_31_MINUS_10_33_MINUS_10_3_ETC___d604 =
	     switches_74_MINUS_10_31_MINUS_10_33_MINUS_10___d527 < 6'd10 ;
  assign switches_74_MINUS_10_31_MINUS_10_33_MINUS_10_3_ETC___d605 =
	     switches_74_MINUS_10_31_MINUS_10_33_MINUS_10_3_ETC___d528 <
	     6'd10 ;
  assign switches_74_MINUS_10_31_MINUS_10_33_MINUS_10_3_ETC___d606 =
	     switches_74_MINUS_10_31_MINUS_10_33_MINUS_10_3_ETC___d529 <
	     6'd10 ;
  assign switches_74_MINUS_10_31_MINUS_10_33_MINUS_10___d527 =
	     switches_74_MINUS_10_31_MINUS_10___d526 - 6'd10 ;
  assign switches_74_MINUS_10_31_MINUS_10_33_ULT_10___d603 =
	     switches_74_MINUS_10_31_MINUS_10___d526 < 6'd10 ;
  assign switches_74_MINUS_10_31_MINUS_10___d526 =
	     switches_74_MINUS_10___d525 - 6'd10 ;
  assign switches_74_MINUS_10_31_ULT_10___d602 =
	     switches_74_MINUS_10___d525 < 6'd10 ;
  assign switches_74_MINUS_10___d525 = switches - 6'd10 ;
  assign switches_74_ULE_59___d607 = switches <= 6'd59 ;
  assign switches_74_ULT_10___d601 = switches < 6'd10 ;
  assign takeInput_ULE_8___d145 = takeInput <= 18'd8 ;
  assign x__h10214 = blinker ? 4'b0011 : 4'b0010 ;
  assign x__h2179 =
	     btn1stream[7] ?
	       one__h2272 :
	       IF_btn1stream_BIT_6_2_THEN_IF_btn1stream_BIT_5_ETC___d475 ;
  assign x__h2565 =
	     btn2stream[7] ?
	       one__h2658 :
	       IF_btn2stream_3_BIT_6_7_THEN_IF_btn2stream_3_B_ETC___d482 ;
  assign x__h2939 =
	     btn3stream[7] ?
	       one__h3032 :
	       IF_btn3stream_7_BIT_6_2_THEN_IF_btn3stream_7_B_ETC___d489 ;
  assign x__h4492 = stopWatch1 + 4'd1 ;
  assign x__h4538 = stopWatch2 + 4'd1 ;
  assign x__h4578 = stopWatch3 + 4'd1 ;
  assign x__h4614 = stopWatch4 + 4'd1 ;
  always@(mode)
  begin
    case (mode)
      3'd0: CASE_mode_0_0_1_1_2_2_3__q1 = 3'd1;
      3'd1: CASE_mode_0_0_1_1_2_2_3__q1 = 3'd2;
      3'd2: CASE_mode_0_0_1_1_2_2_3__q1 = 3'd3;
      default: CASE_mode_0_0_1_1_2_2_3__q1 = 3'd0;
    endcase
  end
  always@(mode)
  begin
    case (mode)
      3'd0: CASE_mode_6_0_4_1_5__q2 = 3'd4;
      3'd1: CASE_mode_6_0_4_1_5__q2 = 3'd5;
      default: CASE_mode_6_0_4_1_5__q2 = 3'd6;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        alarmHH <= `BSV_ASSIGNMENT_DELAY 5'b00111;
	alarmMM <= `BSV_ASSIGNMENT_DELAY 6'd0;
	anodeSelected <= `BSV_ASSIGNMENT_DELAY 2'd0;
	blinker <= `BSV_ASSIGNMENT_DELAY 1'd0;
	btdecelerator <= `BSV_ASSIGNMENT_DELAY 8'd0;
	btn0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	btn1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	btn1stream <= `BSV_ASSIGNMENT_DELAY 8'd0;
	btn2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	btn2stream <= `BSV_ASSIGNMENT_DELAY 8'd0;
	btn3stream <= `BSV_ASSIGNMENT_DELAY 8'd0;
	btnin <= `BSV_ASSIGNMENT_DELAY 3'd0;
	counterAnodeSelected <= `BSV_ASSIGNMENT_DELAY 15'd0;
	counterblinker <= `BSV_ASSIGNMENT_DELAY 23'd0;
	led <= `BSV_ASSIGNMENT_DELAY 4'd0;
	mode <= `BSV_ASSIGNMENT_DELAY 3'd0;
	segmentData <= `BSV_ASSIGNMENT_DELAY 7'd0;
	setState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	stopWatch1 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	stopWatch2 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	stopWatch3 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	stopWatch4 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	stopWatchDecelerator <= `BSV_ASSIGNMENT_DELAY 18'd0;
	stopWatchState <= `BSV_ASSIGNMENT_DELAY 1'd0;
	switches <= `BSV_ASSIGNMENT_DELAY 6'd0;
	takeInput <= `BSV_ASSIGNMENT_DELAY 18'd0;
	toShow1 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	toShow2 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	toShow3 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	toShow4 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (alarmHH$EN) alarmHH <= `BSV_ASSIGNMENT_DELAY alarmHH$D_IN;
	if (alarmMM$EN) alarmMM <= `BSV_ASSIGNMENT_DELAY alarmMM$D_IN;
	if (anodeSelected$EN)
	  anodeSelected <= `BSV_ASSIGNMENT_DELAY anodeSelected$D_IN;
	if (blinker$EN) blinker <= `BSV_ASSIGNMENT_DELAY blinker$D_IN;
	if (btdecelerator$EN)
	  btdecelerator <= `BSV_ASSIGNMENT_DELAY btdecelerator$D_IN;
	if (btn0$EN) btn0 <= `BSV_ASSIGNMENT_DELAY btn0$D_IN;
	if (btn1$EN) btn1 <= `BSV_ASSIGNMENT_DELAY btn1$D_IN;
	if (btn1stream$EN)
	  btn1stream <= `BSV_ASSIGNMENT_DELAY btn1stream$D_IN;
	if (btn2$EN) btn2 <= `BSV_ASSIGNMENT_DELAY btn2$D_IN;
	if (btn2stream$EN)
	  btn2stream <= `BSV_ASSIGNMENT_DELAY btn2stream$D_IN;
	if (btn3stream$EN)
	  btn3stream <= `BSV_ASSIGNMENT_DELAY btn3stream$D_IN;
	if (btnin$EN) btnin <= `BSV_ASSIGNMENT_DELAY btnin$D_IN;
	if (counterAnodeSelected$EN)
	  counterAnodeSelected <= `BSV_ASSIGNMENT_DELAY
	      counterAnodeSelected$D_IN;
	if (counterblinker$EN)
	  counterblinker <= `BSV_ASSIGNMENT_DELAY counterblinker$D_IN;
	if (led$EN) led <= `BSV_ASSIGNMENT_DELAY led$D_IN;
	if (mode$EN) mode <= `BSV_ASSIGNMENT_DELAY mode$D_IN;
	if (segmentData$EN)
	  segmentData <= `BSV_ASSIGNMENT_DELAY segmentData$D_IN;
	if (setState$EN) setState <= `BSV_ASSIGNMENT_DELAY setState$D_IN;
	if (stopWatch1$EN)
	  stopWatch1 <= `BSV_ASSIGNMENT_DELAY stopWatch1$D_IN;
	if (stopWatch2$EN)
	  stopWatch2 <= `BSV_ASSIGNMENT_DELAY stopWatch2$D_IN;
	if (stopWatch3$EN)
	  stopWatch3 <= `BSV_ASSIGNMENT_DELAY stopWatch3$D_IN;
	if (stopWatch4$EN)
	  stopWatch4 <= `BSV_ASSIGNMENT_DELAY stopWatch4$D_IN;
	if (stopWatchDecelerator$EN)
	  stopWatchDecelerator <= `BSV_ASSIGNMENT_DELAY
	      stopWatchDecelerator$D_IN;
	if (stopWatchState$EN)
	  stopWatchState <= `BSV_ASSIGNMENT_DELAY stopWatchState$D_IN;
	if (switches$EN) switches <= `BSV_ASSIGNMENT_DELAY switches$D_IN;
	if (takeInput$EN) takeInput <= `BSV_ASSIGNMENT_DELAY takeInput$D_IN;
	if (toShow1$EN) toShow1 <= `BSV_ASSIGNMENT_DELAY toShow1$D_IN;
	if (toShow2$EN) toShow2 <= `BSV_ASSIGNMENT_DELAY toShow2$D_IN;
	if (toShow3$EN) toShow3 <= `BSV_ASSIGNMENT_DELAY toShow3$D_IN;
	if (toShow4$EN) toShow4 <= `BSV_ASSIGNMENT_DELAY toShow4$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    alarmHH = 5'h0A;
    alarmMM = 6'h2A;
    anodeSelected = 2'h2;
    blinker = 1'h0;
    btdecelerator = 8'hAA;
    btn0 = 1'h0;
    btn1 = 1'h0;
    btn1stream = 8'hAA;
    btn2 = 1'h0;
    btn2stream = 8'hAA;
    btn3stream = 8'hAA;
    btnin = 3'h2;
    counterAnodeSelected = 15'h2AAA;
    counterblinker = 23'h2AAAAA;
    led = 4'hA;
    mode = 3'h2;
    segmentData = 7'h2A;
    setState = 3'h2;
    stopWatch1 = 4'hA;
    stopWatch2 = 4'hA;
    stopWatch3 = 4'hA;
    stopWatch4 = 4'hA;
    stopWatchDecelerator = 18'h2AAAA;
    stopWatchState = 1'h0;
    switches = 6'h2A;
    takeInput = 18'h2AAAA;
    toShow1 = 4'hA;
    toShow2 = 4'hA;
    toShow3 = 4'hA;
    toShow4 = 4'hA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkWatch

